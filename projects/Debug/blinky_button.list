
blinky_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003264  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08003504  08003504  00004504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  080037c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000016a0  24000014  080037d4  00005014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240016b4  080037d4  000056b4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009c3a  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001bbd  00000000  00000000  0000ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000720  00000000  00000000  00010840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000550  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002b29f  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000927d  00000000  00000000  0003c74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e21a  00000000  00000000  000459cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a3be6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b18  00000000  00000000  001a3c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007e  00000000  00000000  001a5744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080034ec 	.word	0x080034ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	080034ec 	.word	0x080034ec

080002e0 <vApplicationTickHook>:
                                    uint32_t *pulTimerTaskStackSize);

/* Hooks ===================================================================*/
/* Application hooks used in this project ==================================*/
/* NOTE: only the "FromISR" API variants are allowed in vApplicationTickHook*/
void vApplicationTickHook(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
    */
    static struct ButtonsDebouncing {
        uint32_t depressed;
        uint32_t previous;
    } buttons = { 0U, 0U };
    uint32_t current = GPIOC->IDR; /* read GPIO PortC */
 80002ea:	4b24      	ldr	r3, [pc, #144]	@ (800037c <vApplicationTickHook+0x9c>)
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	60fb      	str	r3, [r7, #12]
    uint32_t tmp = buttons.depressed; /* save the debounced depressed */
 80002f0:	4b23      	ldr	r3, [pc, #140]	@ (8000380 <vApplicationTickHook+0xa0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	60bb      	str	r3, [r7, #8]
    buttons.depressed |= (buttons.previous & current); /* set depressed */
 80002f6:	4b22      	ldr	r3, [pc, #136]	@ (8000380 <vApplicationTickHook+0xa0>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <vApplicationTickHook+0xa0>)
 80002fc:	6859      	ldr	r1, [r3, #4]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	400b      	ands	r3, r1
 8000302:	4313      	orrs	r3, r2
 8000304:	4a1e      	ldr	r2, [pc, #120]	@ (8000380 <vApplicationTickHook+0xa0>)
 8000306:	6013      	str	r3, [r2, #0]
    buttons.depressed &= (buttons.previous | current); /* clear released */
 8000308:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <vApplicationTickHook+0xa0>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <vApplicationTickHook+0xa0>)
 800030e:	6859      	ldr	r1, [r3, #4]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	430b      	orrs	r3, r1
 8000314:	4013      	ands	r3, r2
 8000316:	4a1a      	ldr	r2, [pc, #104]	@ (8000380 <vApplicationTickHook+0xa0>)
 8000318:	6013      	str	r3, [r2, #0]
    buttons.previous   = current; /* update the history */
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <vApplicationTickHook+0xa0>)
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	6053      	str	r3, [r2, #4]
    tmp ^= buttons.depressed;     /* changed debounced depressed */
 8000320:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <vApplicationTickHook+0xa0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	4053      	eors	r3, r2
 8000328:	60bb      	str	r3, [r7, #8]
    if ((tmp & (1U << B1_PIN)) != 0U) { /* debounced B1 state changed? */
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000330:	2b00      	cmp	r3, #0
 8000332:	d014      	beq.n	800035e <vApplicationTickHook+0x7e>
        if ((buttons.depressed & (1U << B1_PIN)) != 0U) { /* depressed? */
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <vApplicationTickHook+0xa0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d007      	beq.n	8000350 <vApplicationTickHook+0x70>
            /* post the "button-pressed" event from ISR */
            static Event const buttonPressedEvt = {BUTTON_PRESSED_SIG};
            Active_postFromISR(AO_blinkyButton, &buttonPressedEvt,
 8000340:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <vApplicationTickHook+0xa4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1d3a      	adds	r2, r7, #4
 8000346:	4910      	ldr	r1, [pc, #64]	@ (8000388 <vApplicationTickHook+0xa8>)
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd67 	bl	8000e1c <Active_postFromISR>
 800034e:	e006      	b.n	800035e <vApplicationTickHook+0x7e>
                               &xHigherPriorityTaskWoken);
        }
        else { /* the button is released */
             /* post the "button-released" event from ISR */
             static Event const buttonReleasedEvt = {BUTTON_RELEASED_SIG};
             Active_postFromISR(AO_blinkyButton, &buttonReleasedEvt,
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <vApplicationTickHook+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	1d3a      	adds	r2, r7, #4
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <vApplicationTickHook+0xac>)
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fd5f 	bl	8000e1c <Active_postFromISR>
                                 &xHigherPriorityTaskWoken);
        }
    }

    /* notify FreeRTOS to perform context switch from ISR, if needed */
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d007      	beq.n	8000374 <vApplicationTickHook+0x94>
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <vApplicationTickHook+0xb0>)
 8000366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	f3bf 8f4f 	dsb	sy
 8000370:	f3bf 8f6f 	isb	sy
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	58020800 	.word	0x58020800
 8000380:	24000030 	.word	0x24000030
 8000384:	24000000 	.word	0x24000000
 8000388:	0800379c 	.word	0x0800379c
 800038c:	080037a0 	.word	0x080037a0
 8000390:	e000ed04 	.word	0xe000ed04

08000394 <vApplicationIdleHook>:
/*..........................................................................*/
void vApplicationIdleHook(void) {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
    * you might need to customize the clock management for your application,
    * see the datasheet for your particular Cortex-M3 MCU.
    */
    __WFI(); /* Wait-For-Interrupt */
#endif
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <vApplicationStackOverflowHook>:
/*..........................................................................*/
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
    (void)xTask;
    (void)pcTaskName;
    /* ERROR!!! */
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <vApplicationGetIdleTaskMemory>:
 * the memory that is used by the Idle task.
 */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
                                   StackType_t **ppxIdleTaskStackBuffer,
                                   uint32_t *pulIdleTaskStackSize)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
    static StackType_t  uxIdleTaskStack[configMINIMAL_STACK_SIZE];

    /* Pass out a pointer to the StaticTask_t structure in which the
     * Idle task's state will be stored.
     */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	4a07      	ldr	r2, [pc, #28]	@ (80003e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80003c8:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = &uxIdleTaskStack[0];
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	4a06      	ldr	r2, [pc, #24]	@ (80003e8 <vApplicationGetIdleTaskMemory+0x30>)
 80003ce:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
     * Note that, as the array is necessarily of type StackType_t,
     * configMINIMAL_STACK_SIZE is specified in words, not bytes.
     */
    *pulIdleTaskStackSize = sizeof(uxIdleTaskStack) / sizeof(uxIdleTaskStack[0]);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003d6:	601a      	str	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	24000038 	.word	0x24000038
 80003e8:	24000084 	.word	0x24000084

080003ec <vApplicationGetTimerTaskMemory>:
 * provide an implementation of vApplicationGetTimerTaskMemory() to provide
 * the memory that is used by the Timer task.
 */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize) {
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
    static StackType_t  uxTimerTaskStack[configTIMER_TASK_STACK_DEPTH];

    /* Pass out a pointer to the StaticTask_t structure in which the
     * Timer task's state will be stored.
     */
    *ppxTimerTaskTCBBuffer   = &xTimerTask_TCB;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4a07      	ldr	r2, [pc, #28]	@ (8000418 <vApplicationGetTimerTaskMemory+0x2c>)
 80003fc:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = &uxTimerTaskStack[0];
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	4a06      	ldr	r2, [pc, #24]	@ (800041c <vApplicationGetTimerTaskMemory+0x30>)
 8000402:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
     * Note that, as the array is necessarily of type StackType_t,
     * configTIMER_TASK_STACK_DEPTH is specified in words, not bytes.
     */
    *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	24000484 	.word	0x24000484
 800041c:	240004d0 	.word	0x240004d0

08000420 <BSP_init>:

/* BSP functions ===========================================================*/
void BSP_init(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
    /* NOTE: SystemInit() already called from the startup code
    *  but SystemCoreClock needs to be updated
    */
    SystemCoreClockUpdate();
 8000426:	f000 fa5b 	bl	80008e0 <SystemCoreClockUpdate>

    /* Configure the MPU to prevent NULL-pointer dereferencing
    * see: www.state-machine.com/null-pointer-protection-with-arm-cortex-m-mpu
    */
    MPU->RBAR = 0x0U                          /* base address (NULL) */
 800042a:	4b58      	ldr	r3, [pc, #352]	@ (800058c <BSP_init+0x16c>)
 800042c:	2217      	movs	r2, #23
 800042e:	60da      	str	r2, [r3, #12]
                | MPU_RBAR_VALID_Msk          /* valid region */
                | (MPU_RBAR_REGION_Msk & 7U); /* region #7 */
    MPU->RASR = (7U << MPU_RASR_SIZE_Pos)     /* 2^(7+1) region */
 8000430:	4b56      	ldr	r3, [pc, #344]	@ (800058c <BSP_init+0x16c>)
 8000432:	220f      	movs	r2, #15
 8000434:	611a      	str	r2, [r3, #16]
                | (0x0U << MPU_RASR_AP_Pos)   /* no-access region */
                | MPU_RASR_ENABLE_Msk;        /* region enable */

    MPU->CTRL = MPU_CTRL_PRIVDEFENA_Msk       /* enable background region */
 8000436:	4b55      	ldr	r3, [pc, #340]	@ (800058c <BSP_init+0x16c>)
 8000438:	2205      	movs	r2, #5
 800043a:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy
}
 8000440:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000448:	4b51      	ldr	r3, [pc, #324]	@ (8000590 <BSP_init+0x170>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d11b      	bne.n	800048c <BSP_init+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000454:	f3bf 8f4f 	dsb	sy
}
 8000458:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800045a:	f3bf 8f6f 	isb	sy
}
 800045e:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000460:	4b4b      	ldr	r3, [pc, #300]	@ (8000590 <BSP_init+0x170>)
 8000462:	2200      	movs	r2, #0
 8000464:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000468:	f3bf 8f4f 	dsb	sy
}
 800046c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800046e:	f3bf 8f6f 	isb	sy
}
 8000472:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000474:	4b46      	ldr	r3, [pc, #280]	@ (8000590 <BSP_init+0x170>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a45      	ldr	r2, [pc, #276]	@ (8000590 <BSP_init+0x170>)
 800047a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800047e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000480:	f3bf 8f4f 	dsb	sy
}
 8000484:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000486:	f3bf 8f6f 	isb	sy
}
 800048a:	e000      	b.n	800048e <BSP_init+0x6e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800048c:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800048e:	4b40      	ldr	r3, [pc, #256]	@ (8000590 <BSP_init+0x170>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d138      	bne.n	800050c <BSP_init+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800049a:	4b3d      	ldr	r3, [pc, #244]	@ (8000590 <BSP_init+0x170>)
 800049c:	2200      	movs	r2, #0
 800049e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004a2:	f3bf 8f4f 	dsb	sy
}
 80004a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004a8:	4b39      	ldr	r3, [pc, #228]	@ (8000590 <BSP_init+0x170>)
 80004aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004ae:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	0b5b      	lsrs	r3, r3, #13
 80004b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004b8:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	08db      	lsrs	r3, r3, #3
 80004be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004c2:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	015a      	lsls	r2, r3, #5
 80004c8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004d2:	492f      	ldr	r1, [pc, #188]	@ (8000590 <BSP_init+0x170>)
 80004d4:	4313      	orrs	r3, r2
 80004d6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	1e5a      	subs	r2, r3, #1
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1ef      	bne.n	80004c4 <BSP_init+0xa4>
    } while(sets-- != 0U);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1e5      	bne.n	80004ba <BSP_init+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80004ee:	f3bf 8f4f 	dsb	sy
}
 80004f2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004f4:	4b26      	ldr	r3, [pc, #152]	@ (8000590 <BSP_init+0x170>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a25      	ldr	r2, [pc, #148]	@ (8000590 <BSP_init+0x170>)
 80004fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000500:	f3bf 8f4f 	dsb	sy
}
 8000504:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000506:	f3bf 8f6f 	isb	sy
}
 800050a:	e000      	b.n	800050e <BSP_init+0xee>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800050c:	bf00      	nop

    SCB_EnableICache(); /* Enable I-Cache */
    SCB_EnableDCache(); /* Enable D-Cache */

    /* enable GPIOB port clock for LEds and test pins */
    RCC->AHB4ENR |= RCC_AHB4ENR_GPIOBEN;
 800050e:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <BSP_init+0x174>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000514:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <BSP_init+0x174>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    /* set all used GPIOB pins as push-pull output, no pull-up, pull-down */
    GPIOB->MODER &=
 800051e:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <BSP_init+0x178>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	491d      	ldr	r1, [pc, #116]	@ (8000598 <BSP_init+0x178>)
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <BSP_init+0x17c>)
 8000526:	4013      	ands	r3, r2
 8000528:	600b      	str	r3, [r1, #0]
        ~((3U << 2U*LED0_PIN) | (3U << 2U*LED1_PIN) | (3U << 2U*LED2_PIN));
    GPIOB->MODER |=
 800052a:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <BSP_init+0x178>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	491a      	ldr	r1, [pc, #104]	@ (8000598 <BSP_init+0x178>)
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <BSP_init+0x180>)
 8000532:	4313      	orrs	r3, r2
 8000534:	600b      	str	r3, [r1, #0]
         ((1U << 2U*LED0_PIN) | (1U << 2U*LED1_PIN) | (1U << 2U*LED2_PIN));
    GPIOB->OTYPER &=
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <BSP_init+0x178>)
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	4917      	ldr	r1, [pc, #92]	@ (8000598 <BSP_init+0x178>)
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <BSP_init+0x184>)
 800053e:	4013      	ands	r3, r2
 8000540:	604b      	str	r3, [r1, #4]
        ~((1U <<    LED0_PIN) | (1U <<    LED1_PIN) | (1U <<    LED2_PIN));
    GPIOB->PUPDR &=
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <BSP_init+0x178>)
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	4914      	ldr	r1, [pc, #80]	@ (8000598 <BSP_init+0x178>)
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <BSP_init+0x17c>)
 800054a:	4013      	ands	r3, r2
 800054c:	60cb      	str	r3, [r1, #12]
        ~((3U << 2U*LED0_PIN) | (3U << 2U*LED1_PIN) | (3U << 2U*LED2_PIN));

    /* enable GPIOC clock port for the Button B1 */
    RCC->AHB4ENR |= RCC_AHB4ENR_GPIOCEN;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <BSP_init+0x174>)
 8000550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000554:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <BSP_init+0x174>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    /* configure Button B1 pin on GPIOC as input, no pull-up, pull-down */
    GPIOC->MODER   &= ~(3U << 2U*B1_PIN);
 800055e:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <BSP_init+0x188>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a11      	ldr	r2, [pc, #68]	@ (80005a8 <BSP_init+0x188>)
 8000564:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000568:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 << 2U*B1_PIN);
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <BSP_init+0x188>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <BSP_init+0x188>)
 8000570:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000574:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR   |=  (2U << 2U*B1_PIN);
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <BSP_init+0x188>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <BSP_init+0x188>)
 800057c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000580:	60d3      	str	r3, [r2, #12]
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	e000ed90 	.word	0xe000ed90
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	58024400 	.word	0x58024400
 8000598:	58020400 	.word	0x58020400
 800059c:	cfff3ffc 	.word	0xcfff3ffc
 80005a0:	10004001 	.word	0x10004001
 80005a4:	ffffbf7e 	.word	0xffffbf7e
 80005a8:	58020800 	.word	0x58020800

080005ac <BSP_led0_off>:
/*..........................................................................*/
void BSP_led0_off(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
    GPIOB->BSRR = (1U << (LED0_PIN + 16U));
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <BSP_led0_off+0x18>)
 80005b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005b6:	619a      	str	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	58020400 	.word	0x58020400

080005c8 <BSP_led0_on>:
/*..........................................................................*/
void BSP_led0_on(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
    GPIOB->BSRR = (1U << LED0_PIN);
 80005cc:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <BSP_led0_on+0x14>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	619a      	str	r2, [r3, #24]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	58020400 	.word	0x58020400

080005e0 <BSP_led1_off>:
/*..........................................................................*/
void BSP_led1_off(void) {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    GPIOB->BSRR = (1U << (LED1_PIN + 16U));
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <BSP_led1_off+0x18>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ea:	619a      	str	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	58020400 	.word	0x58020400

080005fc <BSP_led1_on>:
/*..........................................................................*/
void BSP_led1_on(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
    GPIOB->BSRR = (1U << LED1_PIN);
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <BSP_led1_on+0x18>)
 8000602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000606:	619a      	str	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	58020400 	.word	0x58020400

08000618 <BSP_start>:
/*..........................................................................*/
void BSP_start(void) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
    /* set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate */
    /* SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC); done in FreeRTOS */

    /* set priorities of ISRs used in the system */
    /* ... */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <assert_failed>:
/*..........................................................................*/
/* error-handling function called by exception handlers in the startup code */
void assert_failed(char const *module, int loc); /* prototype */
void assert_failed(char const *module, int loc) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
    /* NOTE: add here your application-specific error handling */
    (void)module;
    (void)loc;
#ifndef NDEBUG /* debug build? */
    /* light-all both LEDs */
    GPIOB->BSRR = (1U << LED0_PIN);
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <assert_failed+0x24>)
 8000634:	2201      	movs	r2, #1
 8000636:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (1U << LED1_PIN);
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <assert_failed+0x24>)
 800063a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800063e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (1U << LED2_PIN);
 8000640:	4b02      	ldr	r3, [pc, #8]	@ (800064c <assert_failed+0x24>)
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	619a      	str	r2, [r3, #24]

    /* tie the CPU in this endless loop and wait for the debugger... */
    while (1) {
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <assert_failed+0x1e>
 800064a:	bf00      	nop
 800064c:	58020400 	.word	0x58020400

08000650 <BlinkyButton_dispatch>:
} BlinkyButton;

/* Function Prototype ============================================================*/
void BlinkyButton_ctor(BlinkyButton * const me);

static void BlinkyButton_dispatch(BlinkyButton * const me, Event const * const e) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    switch (e->sig) {
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d02f      	beq.n	80006c2 <BlinkyButton_dispatch+0x72>
 8000662:	2b03      	cmp	r3, #3
 8000664:	dc30      	bgt.n	80006c8 <BlinkyButton_dispatch+0x78>
 8000666:	2b01      	cmp	r3, #1
 8000668:	dc02      	bgt.n	8000670 <BlinkyButton_dispatch+0x20>
 800066a:	2b00      	cmp	r3, #0
 800066c:	da03      	bge.n	8000676 <BlinkyButton_dispatch+0x26>
        case BUTTON_RELEASED_SIG: {
            BSP_led1_off();
            break;
        }
        default: {
            break;
 800066e:	e02b      	b.n	80006c8 <BlinkyButton_dispatch+0x78>
    switch (e->sig) {
 8000670:	2b02      	cmp	r3, #2
 8000672:	d023      	beq.n	80006bc <BlinkyButton_dispatch+0x6c>
            break;
 8000674:	e028      	b.n	80006c8 <BlinkyButton_dispatch+0x78>
            if (!me->isLedOn) { /* LED not on */
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800067c:	f083 0301 	eor.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00c      	beq.n	80006a0 <BlinkyButton_dispatch+0x50>
                BSP_led0_on();
 8000686:	f7ff ff9f 	bl	80005c8 <BSP_led0_on>
                me->isLedOn = true;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                TimeEvent_arm(&me->te, (200 / portTICK_RATE_MS));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	33a0      	adds	r3, #160	@ 0xa0
 8000696:	21c8      	movs	r1, #200	@ 0xc8
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fc0b 	bl	8000eb4 <TimeEvent_arm>
            break;
 800069e:	e014      	b.n	80006ca <BlinkyButton_dispatch+0x7a>
                BSP_led0_off();
 80006a0:	f7ff ff84 	bl	80005ac <BSP_led0_off>
                me->isLedOn = false;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
                TimeEvent_arm(&me->te, (800 / portTICK_RATE_MS));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	33a0      	adds	r3, #160	@ 0xa0
 80006b0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fbfd 	bl	8000eb4 <TimeEvent_arm>
            break;
 80006ba:	e006      	b.n	80006ca <BlinkyButton_dispatch+0x7a>
            BSP_led1_on();
 80006bc:	f7ff ff9e 	bl	80005fc <BSP_led1_on>
            break;
 80006c0:	e003      	b.n	80006ca <BlinkyButton_dispatch+0x7a>
            BSP_led1_off();
 80006c2:	f7ff ff8d 	bl	80005e0 <BSP_led1_off>
            break;
 80006c6:	e000      	b.n	80006ca <BlinkyButton_dispatch+0x7a>
            break;
 80006c8:	bf00      	nop
        }
    }
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <BlinkyButton_ctor>:
void BlinkyButton_ctor(BlinkyButton * const me) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    Active_ctor(&me->super, (DispatchHandler)&BlinkyButton_dispatch);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	490b      	ldr	r1, [pc, #44]	@ (800070c <BlinkyButton_ctor+0x38>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fafd 	bl	8000ce0 <Active_ctor>
    me->te.type = TYPE_ONE_SHOT;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    TimeEvent_ctor(&me->te, TIMEOUT_SIG, &me->super);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	33a0      	adds	r3, #160	@ 0xa0
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fbac 	bl	8000e54 <TimeEvent_ctor>
    me->isLedOn = false;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08000651 	.word	0x08000651

08000710 <main>:
static Event *blinkyButton_queue[10];
static BlinkyButton blinkyButton;
Active *AO_blinkyButton = &blinkyButton.super;

/* the main function =======================================================*/
int main() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af04      	add	r7, sp, #16

    BSP_init(); /* initialize the BSP */
 8000716:	f7ff fe83 	bl	8000420 <BSP_init>

    /* create and start the BlinkyButton AO */
    BlinkyButton_ctor(&blinkyButton);
 800071a:	480c      	ldr	r0, [pc, #48]	@ (800074c <main+0x3c>)
 800071c:	f7ff ffda 	bl	80006d4 <BlinkyButton_ctor>
    Active_start(AO_blinkyButton,
 8000720:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <main+0x40>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <main+0x44>)
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	230a      	movs	r3, #10
 8000734:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <main+0x48>)
 8000736:	2101      	movs	r1, #1
 8000738:	f000 fb12 	bl	8000d60 <Active_start>
                 sizeof(blinkyButton_queue)/sizeof(blinkyButton_queue[0]),
                 blinkyButton_stack,
                 sizeof(blinkyButton_stack),
                 0U);

    BSP_start(); /* configure and start interrupts */
 800073c:	f7ff ff6c 	bl	8000618 <BSP_start>

    vTaskStartScheduler(); /* start the FreeRTOS scheduler... */
 8000740:	f001 fae4 	bl	8001d0c <vTaskStartScheduler>
    return 0; /* NOTE: the scheduler does NOT return */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	240010f8 	.word	0x240010f8
 8000750:	24000000 	.word	0x24000000
 8000754:	24000cd0 	.word	0x24000cd0
 8000758:	240010d0 	.word	0x240010d0

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa60 	bl	8000c5c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <SystemInit+0x114>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a42      	ldr	r2, [pc, #264]	@ (80008b4 <SystemInit+0x114>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b4:	4b40      	ldr	r3, [pc, #256]	@ (80008b8 <SystemInit+0x118>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f003 030f 	and.w	r3, r3, #15
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d807      	bhi.n	80007d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c0:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <SystemInit+0x118>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f023 030f 	bic.w	r3, r3, #15
 80007c8:	4a3b      	ldr	r2, [pc, #236]	@ (80008b8 <SystemInit+0x118>)
 80007ca:	f043 0307 	orr.w	r3, r3, #7
 80007ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d0:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <SystemInit+0x11c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a39      	ldr	r2, [pc, #228]	@ (80008bc <SystemInit+0x11c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007dc:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <SystemInit+0x11c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e2:	4b36      	ldr	r3, [pc, #216]	@ (80008bc <SystemInit+0x11c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4935      	ldr	r1, [pc, #212]	@ (80008bc <SystemInit+0x11c>)
 80007e8:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <SystemInit+0x120>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <SystemInit+0x118>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d007      	beq.n	800080a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007fa:	4b2f      	ldr	r3, [pc, #188]	@ (80008b8 <SystemInit+0x118>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f023 030f 	bic.w	r3, r3, #15
 8000802:	4a2d      	ldr	r2, [pc, #180]	@ (80008b8 <SystemInit+0x118>)
 8000804:	f043 0307 	orr.w	r3, r3, #7
 8000808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <SystemInit+0x11c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SystemInit+0x11c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <SystemInit+0x11c>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemInit+0x11c>)
 800081e:	4a29      	ldr	r2, [pc, #164]	@ (80008c4 <SystemInit+0x124>)
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <SystemInit+0x11c>)
 8000824:	4a28      	ldr	r2, [pc, #160]	@ (80008c8 <SystemInit+0x128>)
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <SystemInit+0x11c>)
 800082a:	4a28      	ldr	r2, [pc, #160]	@ (80008cc <SystemInit+0x12c>)
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <SystemInit+0x11c>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000834:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <SystemInit+0x11c>)
 8000836:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <SystemInit+0x12c>)
 8000838:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <SystemInit+0x11c>)
 800083c:	2200      	movs	r2, #0
 800083e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <SystemInit+0x11c>)
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <SystemInit+0x12c>)
 8000844:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <SystemInit+0x11c>)
 8000848:	2200      	movs	r2, #0
 800084a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <SystemInit+0x11c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <SystemInit+0x11c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <SystemInit+0x11c>)
 800085a:	2200      	movs	r2, #0
 800085c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <SystemInit+0x130>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <SystemInit+0x134>)
 8000864:	4013      	ands	r3, r2
 8000866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800086a:	d202      	bcs.n	8000872 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <SystemInit+0x138>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <SystemInit+0x11c>)
 8000874:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d113      	bne.n	80008a8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <SystemInit+0x11c>)
 8000882:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000886:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <SystemInit+0x11c>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800088c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <SystemInit+0x13c>)
 8000892:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000896:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <SystemInit+0x11c>)
 800089a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <SystemInit+0x11c>)
 80008a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	52002000 	.word	0x52002000
 80008bc:	58024400 	.word	0x58024400
 80008c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008c4:	02020200 	.word	0x02020200
 80008c8:	01ff0000 	.word	0x01ff0000
 80008cc:	01010280 	.word	0x01010280
 80008d0:	5c001000 	.word	0x5c001000
 80008d4:	ffff0000 	.word	0xffff0000
 80008d8:	51008108 	.word	0x51008108
 80008dc:	52004000 	.word	0x52004000

080008e0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	@ 0x2c
 80008e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80008e6:	4bb1      	ldr	r3, [pc, #708]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80008ee:	2b18      	cmp	r3, #24
 80008f0:	f200 812e 	bhi.w	8000b50 <SystemCoreClockUpdate+0x270>
 80008f4:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <SystemCoreClockUpdate+0x1c>)
 80008f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fa:	bf00      	nop
 80008fc:	08000961 	.word	0x08000961
 8000900:	08000b51 	.word	0x08000b51
 8000904:	08000b51 	.word	0x08000b51
 8000908:	08000b51 	.word	0x08000b51
 800090c:	08000b51 	.word	0x08000b51
 8000910:	08000b51 	.word	0x08000b51
 8000914:	08000b51 	.word	0x08000b51
 8000918:	08000b51 	.word	0x08000b51
 800091c:	08000975 	.word	0x08000975
 8000920:	08000b51 	.word	0x08000b51
 8000924:	08000b51 	.word	0x08000b51
 8000928:	08000b51 	.word	0x08000b51
 800092c:	08000b51 	.word	0x08000b51
 8000930:	08000b51 	.word	0x08000b51
 8000934:	08000b51 	.word	0x08000b51
 8000938:	08000b51 	.word	0x08000b51
 800093c:	0800097b 	.word	0x0800097b
 8000940:	08000b51 	.word	0x08000b51
 8000944:	08000b51 	.word	0x08000b51
 8000948:	08000b51 	.word	0x08000b51
 800094c:	08000b51 	.word	0x08000b51
 8000950:	08000b51 	.word	0x08000b51
 8000954:	08000b51 	.word	0x08000b51
 8000958:	08000b51 	.word	0x08000b51
 800095c:	08000981 	.word	0x08000981
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000960:	4b92      	ldr	r3, [pc, #584]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	4a91      	ldr	r2, [pc, #580]	@ (8000bb0 <SystemCoreClockUpdate+0x2d0>)
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000972:	e0f7      	b.n	8000b64 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 8000974:	4b8f      	ldr	r3, [pc, #572]	@ (8000bb4 <SystemCoreClockUpdate+0x2d4>)
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000978:	e0f4      	b.n	8000b64 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 800097a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bb8 <SystemCoreClockUpdate+0x2d8>)
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800097e:	e0f1      	b.n	8000b64 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000980:	4b8a      	ldr	r3, [pc, #552]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800098a:	4b88      	ldr	r3, [pc, #544]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 800098c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000994:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000996:	4b85      	ldr	r3, [pc, #532]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80009a0:	4b82      	ldr	r3, [pc, #520]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 80009a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009b8:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 80c3 	beq.w	8000b4a <SystemCoreClockUpdate+0x26a>
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d059      	beq.n	8000a7e <SystemCoreClockUpdate+0x19e>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d878      	bhi.n	8000ac2 <SystemCoreClockUpdate+0x1e2>
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <SystemCoreClockUpdate+0xfe>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d02e      	beq.n	8000a3a <SystemCoreClockUpdate+0x15a>
 80009dc:	e071      	b.n	8000ac2 <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 80009de:	4b73      	ldr	r3, [pc, #460]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	4a71      	ldr	r2, [pc, #452]	@ (8000bb0 <SystemCoreClockUpdate+0x2d0>)
 80009ea:	fa22 f303 	lsr.w	r3, r2, r3
 80009ee:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a08:	4b68      	ldr	r3, [pc, #416]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a18:	ed97 6a04 	vldr	s12, [r7, #16]
 8000a1c:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8000bbc <SystemCoreClockUpdate+0x2dc>
 8000a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a34:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 8000a38:	e071      	b.n	8000b1e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a44:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000bc0 <SystemCoreClockUpdate+0x2e0>
 8000a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a4c:	4b57      	ldr	r3, [pc, #348]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8000a60:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8000bbc <SystemCoreClockUpdate+0x2dc>
 8000a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000a6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a78:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000a7c:	e04f      	b.n	8000b1e <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a88:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000bc4 <SystemCoreClockUpdate+0x2e4>
 8000a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a90:	4b46      	ldr	r3, [pc, #280]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000aa0:	ed97 6a04 	vldr	s12, [r7, #16]
 8000aa4:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8000bbc <SystemCoreClockUpdate+0x2dc>
 8000aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ab0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abc:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000ac0:	e02d      	b.n	8000b1e <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	08db      	lsrs	r3, r3, #3
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	4a38      	ldr	r2, [pc, #224]	@ (8000bb0 <SystemCoreClockUpdate+0x2d0>)
 8000ace:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000afc:	ed97 6a04 	vldr	s12, [r7, #16]
 8000b00:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8000bbc <SystemCoreClockUpdate+0x2dc>
 8000b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b18:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000b1c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b36:	edd7 6a08 	vldr	s13, [r7, #32]
 8000b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b42:	ee17 3a90 	vmov	r3, s15
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 8000b48:	e00c      	b.n	8000b64 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000b4e:	e009      	b.n	8000b64 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <SystemCoreClockUpdate+0x2d0>)
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000b62:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <SystemCoreClockUpdate+0x2e8>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 8000b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <SystemCoreClockUpdate+0x2cc>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <SystemCoreClockUpdate+0x2e8>)
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <SystemCoreClockUpdate+0x2ec>)
 8000b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <SystemCoreClockUpdate+0x2f0>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
 8000b9e:	bf00      	nop
 8000ba0:	372c      	adds	r7, #44	@ 0x2c
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	03d09000 	.word	0x03d09000
 8000bb4:	003d0900 	.word	0x003d0900
 8000bb8:	017d7840 	.word	0x017d7840
 8000bbc:	46000000 	.word	0x46000000
 8000bc0:	4a742400 	.word	0x4a742400
 8000bc4:	4bbebc20 	.word	0x4bbebc20
 8000bc8:	080037a4 	.word	0x080037a4
 8000bcc:	24000008 	.word	0x24000008
 8000bd0:	24000004 	.word	0x24000004

08000bd4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <ExitRun0Mode+0x2c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <ExitRun0Mode+0x2c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000be4:	bf00      	nop
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <ExitRun0Mode+0x2c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	58024800 	.word	0x58024800

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c08:	f7ff ffe4 	bl	8000bd4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c0c:	f7ff fdc8 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 fc27 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fd69 	bl	8000710 <main>
  bx  lr
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c48:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000c4c:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000c50:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000c54:	240016b4 	.word	0x240016b4

08000c58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC3_IRQHandler>
	...

08000c5c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <BSP_PB_IRQHandler+0x20>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f806 	bl	8000c80 <HAL_EXTI_IRQHandler>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	240011d4 	.word	0x240011d4

08000c80 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	011a      	lsls	r2, r3, #4
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_EXTI_IRQHandler+0x5c>)
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d009      	beq.n	8000cd2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4798      	blx	r3
    }
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	58000088 	.word	0x58000088

08000ce0 <Active_ctor>:
* <info@state-machine.com>
*****************************************************************************/
#include "FreeAct.h" /* Free Active Object interface */

/*..........................................................................*/
void Active_ctor(Active * const me, DispatchHandler dispatch) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    me->dispatch = dispatch; /* assign the dispatch handler */
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <Active_eventLoop>:

/*..........................................................................*/
/* thread function for all Active Objects (FreeRTOS task signature) */
static void Active_eventLoop(void *pvParameters) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    Active *me = (Active *)pvParameters;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
    static Event const initEvt = { INIT_SIG };

    configASSERT(me); /* Active object must be provided */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d103      	bne.n	8000d1a <Active_eventLoop+0x1a>
 8000d12:	212f      	movs	r1, #47	@ 0x2f
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <Active_eventLoop+0x58>)
 8000d16:	f7ff fc87 	bl	8000628 <assert_failed>

    /* initialize the AO */
    (*me->dispatch)(me, &initEvt);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d20:	490e      	ldr	r1, [pc, #56]	@ (8000d5c <Active_eventLoop+0x5c>)
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	4798      	blx	r3

    for (;;) {   /* for-ever "superloop" */
        Event const *e; /* pointer to event object ("message") */

        /* wait for any event and receive it into object 'e' */
        xQueueReceive(me->queue, &e, portMAX_DELAY); /* BLOCKING! */
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d2a:	f107 0108 	add.w	r1, r7, #8
 8000d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fc2a 	bl	800158c <xQueueReceive>
        configASSERT(e != (Event const *)0);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d103      	bne.n	8000d46 <Active_eventLoop+0x46>
 8000d3e:	2139      	movs	r1, #57	@ 0x39
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <Active_eventLoop+0x58>)
 8000d42:	f7ff fc71 	bl	8000628 <assert_failed>

        /* dispatch event to the active object 'me' */
        (*me->dispatch)(me, e); /* NO BLOCKING! */
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	4798      	blx	r3
    for (;;) {   /* for-ever "superloop" */
 8000d54:	e7e7      	b.n	8000d26 <Active_eventLoop+0x26>
 8000d56:	bf00      	nop
 8000d58:	08003504 	.word	0x08003504
 8000d5c:	080037b4 	.word	0x080037b4

08000d60 <Active_start>:
                  Event **queueSto,
                  uint32_t queueLen,
                  void *stackSto,
                  uint32_t stackSize,
                  uint16_t opt)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	72fb      	strb	r3, [r7, #11]
    StackType_t *stk_sto = stackSto;
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	617b      	str	r3, [r7, #20]
    uint32_t stk_depth = (stackSize / sizeof(StackType_t));
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	613b      	str	r3, [r7, #16]

    (void)opt; /* unused parameter */
    me->queue = xQueueCreateStatic(
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3354      	adds	r3, #84	@ 0x54
 8000d7e:	2200      	movs	r2, #0
 8000d80:	9200      	str	r2, [sp, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	2104      	movs	r1, #4
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f000 fa10 	bl	80011ac <xQueueGenericCreateStatic>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	651a      	str	r2, [r3, #80]	@ 0x50
                   queueLen,            /* queue length - provided by user */
                   sizeof(Event *),     /* item size */
                   (uint8_t *)queueSto, /* queue storage - provided by user */
                   &me->queue_cb);      /* queue control block */
    configASSERT(me->queue);            /* queue must be created */
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <Active_start+0x42>
 8000d9a:	2152      	movs	r1, #82	@ 0x52
 8000d9c:	480f      	ldr	r0, [pc, #60]	@ (8000ddc <Active_start+0x7c>)
 8000d9e:	f7ff fc43 	bl	8000628 <assert_failed>

    me->thread = xTaskCreateStatic(
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	3204      	adds	r2, #4
 8000da8:	9202      	str	r2, [sp, #8]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	9201      	str	r2, [sp, #4]
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	490a      	ldr	r1, [pc, #40]	@ (8000de0 <Active_start+0x80>)
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <Active_start+0x84>)
 8000db8:	f000 fe44 	bl	8001a44 <xTaskCreateStatic>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]
              stk_depth,                /* stack depth */
              me,                       /* the 'pvParameters' parameter */
              prio + tskIDLE_PRIORITY,  /* FreeRTOS priority */
              stk_sto,                  /* stack storage - provided by user */
              &me->thread_cb);          /* task control block */
    configASSERT(me->thread);           /* thread must be created */
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <Active_start+0x72>
 8000dca:	215c      	movs	r1, #92	@ 0x5c
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <Active_start+0x7c>)
 8000dce:	f7ff fc2b 	bl	8000628 <assert_failed>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08003504 	.word	0x08003504
 8000de0:	0800356c 	.word	0x0800356c
 8000de4:	08000d01 	.word	0x08000d01

08000de8 <Active_post>:

/*..........................................................................*/
void Active_post(Active * const me, Event const * const e) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    BaseType_t status = xQueueSendToBack(me->queue, (void *)&e, (TickType_t)0);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8000df6:	4639      	mov	r1, r7
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f000 fa40 	bl	8001280 <xQueueGenericSend>
 8000e00:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdTRUE);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <Active_post+0x28>
 8000e08:	2162      	movs	r1, #98	@ 0x62
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <Active_post+0x30>)
 8000e0c:	f7ff fc0c 	bl	8000628 <assert_failed>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08003504 	.word	0x08003504

08000e1c <Active_postFromISR>:

/*..........................................................................*/
void Active_postFromISR(Active * const me, Event const * const e,
                        BaseType_t *pxHigherPriorityTaskWoken)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    BaseType_t status = xQueueSendToBackFromISR(me->queue, (void *)&e,
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8000e2c:	f107 0108 	add.w	r1, r7, #8
 8000e30:	2300      	movs	r3, #0
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	f000 fb0c 	bl	8001450 <xQueueGenericSendFromISR>
 8000e38:	6178      	str	r0, [r7, #20]
                                                pxHigherPriorityTaskWoken);
    configASSERT(status == pdTRUE);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d003      	beq.n	8000e48 <Active_postFromISR+0x2c>
 8000e40:	216b      	movs	r1, #107	@ 0x6b
 8000e42:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <Active_postFromISR+0x34>)
 8000e44:	f7ff fbf0 	bl	8000628 <assert_failed>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	08003504 	.word	0x08003504

08000e54 <TimeEvent_ctor>:
/*--------------------------------------------------------------------------*/
/* Time Event services... */
static void TimeEvent_callback(TimerHandle_t xTimer);

/*..........................................................................*/
void TimeEvent_ctor(TimeEvent * const me, Signal sig, Active *act) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	817b      	strh	r3, [r7, #10]
    /* no critical section because it is presumed that all TimeEvents
     * are created *before* multitasking has started.
     */
    me->super.sig = sig;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	897a      	ldrh	r2, [r7, #10]
 8000e66:	801a      	strh	r2, [r3, #0]
    me->act = act;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]

    /* Create a timer object */
    me->timer = xTimerCreateStatic("TE", 1U, me->type, me,
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	330c      	adds	r3, #12
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <TimeEvent_ctor+0x54>)
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2101      	movs	r1, #1
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <TimeEvent_ctor+0x58>)
 8000e86:	f001 fdf1 	bl	8002a6c <xTimerCreateStatic>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	609a      	str	r2, [r3, #8]
                                   TimeEvent_callback, &me->timer_cb);
    configASSERT(me->timer);            /* timer must be created */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <TimeEvent_ctor+0x4c>
 8000e98:	217d      	movs	r1, #125	@ 0x7d
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <TimeEvent_ctor+0x5c>)
 8000e9c:	f7ff fbc4 	bl	8000628 <assert_failed>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	08000f5d 	.word	0x08000f5d
 8000eac:	08003570 	.word	0x08003570
 8000eb0:	08003504 	.word	0x08003504

08000eb4 <TimeEvent_arm>:

/*..........................................................................*/
void TimeEvent_arm(TimeEvent * const me, uint32_t millisec) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
    TickType_t ticks;
    BaseType_t status;
    BaseType_t xHigherPriorityTaskWoken;

    ticks = (millisec / portTICK_PERIOD_MS);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0U) {
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <TimeEvent_arm+0x18>
        ticks = 1U;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
    {
        uint32_t ulCurrentInterrupt;
        BaseType_t xReturn;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000ecc:	f3ef 8305 	mrs	r3, IPSR
 8000ed0:	617b      	str	r3, [r7, #20]

        if( ulCurrentInterrupt == 0 )
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <TimeEvent_arm+0x2a>
        {
            xReturn = pdFALSE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e001      	b.n	8000ee2 <TimeEvent_arm+0x2e>
        }
        else
        {
            xReturn = pdTRUE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
        }

        return xReturn;
 8000ee2:	693b      	ldr	r3, [r7, #16]
    }

    if (xPortIsInsideInterrupt() == pdTRUE) {
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11f      	bne.n	8000f28 <TimeEvent_arm+0x74>
        xHigherPriorityTaskWoken = pdFALSE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]

        status = xTimerChangePeriodFromISR(me->timer, ticks,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6898      	ldr	r0, [r3, #8]
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	2109      	movs	r1, #9
 8000efc:	f001 fe1e 	bl	8002b3c <xTimerGenericCommand>
 8000f00:	61b8      	str	r0, [r7, #24]
                                           &xHigherPriorityTaskWoken);
        configASSERT(status == pdPASS);
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d003      	beq.n	8000f10 <TimeEvent_arm+0x5c>
 8000f08:	2190      	movs	r1, #144	@ 0x90
 8000f0a:	4812      	ldr	r0, [pc, #72]	@ (8000f54 <TimeEvent_arm+0xa0>)
 8000f0c:	f7ff fb8c 	bl	8000628 <assert_failed>

        portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d019      	beq.n	8000f4a <TimeEvent_arm+0x96>
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <TimeEvent_arm+0xa4>)
 8000f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
    }
    else {
        status = xTimerChangePeriod(me->timer, ticks, 0);
        configASSERT(status == pdPASS);
    }
}
 8000f26:	e010      	b.n	8000f4a <TimeEvent_arm+0x96>
        status = xTimerChangePeriod(me->timer, ticks, 0);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2300      	movs	r3, #0
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	2104      	movs	r1, #4
 8000f36:	f001 fe01 	bl	8002b3c <xTimerGenericCommand>
 8000f3a:	61b8      	str	r0, [r7, #24]
        configASSERT(status == pdPASS);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d003      	beq.n	8000f4a <TimeEvent_arm+0x96>
 8000f42:	2196      	movs	r1, #150	@ 0x96
 8000f44:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <TimeEvent_arm+0xa0>)
 8000f46:	f7ff fb6f 	bl	8000628 <assert_failed>
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08003504 	.word	0x08003504
 8000f58:	e000ed04 	.word	0xe000ed04

08000f5c <TimeEvent_callback>:
 *  since xTimer pointing to timer_cb
 */
#define GET_TIME_EVENT_HEAD(ptr) \
    (TimeEvent*)((uintptr_t)(ptr) - offsetof(TimeEvent, timer_cb))

static void TimeEvent_callback(TimerHandle_t xTimer) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    /* Also can use pvTimerGetTimerID(xTimer) */
    TimeEvent * const t = GET_TIME_EVENT_HEAD(xTimer);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b0c      	subs	r3, #12
 8000f68:	60fb      	str	r3, [r7, #12]

    /* Callback always called from non-interrupt context so no need
     * to check xPortIsInsideInterrupt
     */
    Active_post(t->act, &t->super);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff38 	bl	8000de8 <Active_post>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f103 0208 	add.w	r2, r3, #8
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 0208 	add.w	r2, r3, #8
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f103 0208 	add.w	r2, r3, #8
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d103      	bne.n	8000ffa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e00c      	b.n	8001014 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e002      	b.n	8001008 <vListInsert+0x2e>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	429a      	cmp	r2, r3
 8001012:	d2f6      	bcs.n	8001002 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6892      	ldr	r2, [r2, #8]
 8001062:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6852      	ldr	r2, [r2, #4]
 800106c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	d103      	bne.n	8001080 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <xQueueGenericReset+0x22>
 80010b8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 80010bc:	4839      	ldr	r0, [pc, #228]	@ (80011a4 <xQueueGenericReset+0x104>)
 80010be:	f7ff fab3 	bl	8000628 <assert_failed>

    if( ( pxQueue != NULL ) &&
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05d      	beq.n	8001184 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d059      	beq.n	8001184 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d8:	2100      	movs	r1, #0
 80010da:	fba3 2302 	umull	r2, r3, r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d000      	beq.n	80010e4 <xQueueGenericReset+0x44>
 80010e2:	2101      	movs	r1, #1
 80010e4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d14c      	bne.n	8001184 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 80010ea:	f002 f8b5 	bl	8003258 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	441a      	add	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2200      	movs	r2, #0
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800111a:	3b01      	subs	r3, #1
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	441a      	add	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	22ff      	movs	r2, #255	@ 0xff
 800112e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	22ff      	movs	r2, #255	@ 0xff
 8001136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01a      	beq.n	800117e <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	3310      	adds	r3, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f961 	bl	8002414 <xTaskRemoveFromEventList>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d012      	beq.n	800117e <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <xQueueGenericReset+0x108>)
 800115a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	f3bf 8f4f 	dsb	sy
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	e009      	b.n	800117e <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3310      	adds	r3, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff06 	bl	8000f80 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	3324      	adds	r3, #36	@ 0x24
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff01 	bl	8000f80 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800117e:	f002 f897 	bl	80032b0 <vPortExitCritical>
 8001182:	e001      	b.n	8001188 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <xQueueGenericReset+0xf8>
 800118e:	f240 1163 	movw	r1, #355	@ 0x163
 8001192:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <xQueueGenericReset+0x104>)
 8001194:	f7ff fa48 	bl	8000628 <assert_failed>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	08003574 	.word	0x08003574
 80011a8:	e000ed04 	.word	0xe000ed04

080011ac <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <xQueueGenericCreateStatic+0x22>
 80011c4:	f240 1177 	movw	r1, #375	@ 0x177
 80011c8:	481c      	ldr	r0, [pc, #112]	@ (800123c <xQueueGenericCreateStatic+0x90>)
 80011ca:	f7ff fa2d 	bl	8000628 <assert_failed>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d026      	beq.n	8001222 <xQueueGenericCreateStatic+0x76>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d023      	beq.n	8001222 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <xQueueGenericCreateStatic+0x3a>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d01d      	beq.n	8001222 <xQueueGenericCreateStatic+0x76>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <xQueueGenericCreateStatic+0x46>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d117      	bne.n	8001222 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80011f2:	2348      	movs	r3, #72	@ 0x48
 80011f4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b48      	cmp	r3, #72	@ 0x48
 80011fa:	d004      	beq.n	8001206 <xQueueGenericCreateStatic+0x5a>
 80011fc:	f240 1189 	movw	r1, #393	@ 0x189
 8001200:	480e      	ldr	r0, [pc, #56]	@ (800123c <xQueueGenericCreateStatic+0x90>)
 8001202:	f7ff fa11 	bl	8000628 <assert_failed>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8001206:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	617b      	str	r3, [r7, #20]
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800120c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f810 	bl	8001240 <prvInitialiseNewQueue>
 8001220:	e007      	b.n	8001232 <xQueueGenericCreateStatic+0x86>
        }
        else
        {
            configASSERT( pxNewQueue );
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d104      	bne.n	8001232 <xQueueGenericCreateStatic+0x86>
 8001228:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <xQueueGenericCreateStatic+0x90>)
 800122e:	f7ff f9fb 	bl	8000628 <assert_failed>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001232:	697b      	ldr	r3, [r7, #20]
    }
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08003574 	.word	0x08003574

08001240 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e002      	b.n	8001262 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800126e:	2101      	movs	r1, #1
 8001270:	69b8      	ldr	r0, [r7, #24]
 8001272:	f7ff ff15 	bl	80010a0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <xQueueGenericSend+0x26>
 800129c:	f44f 7153 	mov.w	r1, #844	@ 0x34c
 80012a0:	4869      	ldr	r0, [pc, #420]	@ (8001448 <xQueueGenericSend+0x1c8>)
 80012a2:	f7ff f9c1 	bl	8000628 <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <xQueueGenericSend+0x34>
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <xQueueGenericSend+0x38>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <xQueueGenericSend+0x3a>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d104      	bne.n	80012c8 <xQueueGenericSend+0x48>
 80012be:	f240 314d 	movw	r1, #845	@ 0x34d
 80012c2:	4861      	ldr	r0, [pc, #388]	@ (8001448 <xQueueGenericSend+0x1c8>)
 80012c4:	f7ff f9b0 	bl	8000628 <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d103      	bne.n	80012d6 <xQueueGenericSend+0x56>
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <xQueueGenericSend+0x5a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <xQueueGenericSend+0x5c>
 80012da:	2300      	movs	r3, #0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d104      	bne.n	80012ea <xQueueGenericSend+0x6a>
 80012e0:	f240 314e 	movw	r1, #846	@ 0x34e
 80012e4:	4858      	ldr	r0, [pc, #352]	@ (8001448 <xQueueGenericSend+0x1c8>)
 80012e6:	f7ff f99f 	bl	8000628 <assert_failed>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012ea:	f001 fa71 	bl	80027d0 <xTaskGetSchedulerState>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <xQueueGenericSend+0x7a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <xQueueGenericSend+0x7e>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <xQueueGenericSend+0x80>
 80012fe:	2300      	movs	r3, #0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d104      	bne.n	800130e <xQueueGenericSend+0x8e>
 8001304:	f240 3151 	movw	r1, #849	@ 0x351
 8001308:	484f      	ldr	r0, [pc, #316]	@ (8001448 <xQueueGenericSend+0x1c8>)
 800130a:	f7ff f98d 	bl	8000628 <assert_failed>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800130e:	f001 ffa3 	bl	8003258 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131a:	429a      	cmp	r2, r3
 800131c:	d302      	bcc.n	8001324 <xQueueGenericSend+0xa4>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d129      	bne.n	8001378 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6a38      	ldr	r0, [r7, #32]
 800132a:	f000 f9ff 	bl	800172c <prvCopyDataToQueue>
 800132e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	3324      	adds	r3, #36	@ 0x24
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f869 	bl	8002414 <xTaskRemoveFromEventList>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001348:	4b40      	ldr	r3, [pc, #256]	@ (800144c <xQueueGenericSend+0x1cc>)
 800134a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	f3bf 8f6f 	isb	sy
 8001358:	e00a      	b.n	8001370 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001360:	4b3a      	ldr	r3, [pc, #232]	@ (800144c <xQueueGenericSend+0x1cc>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001370:	f001 ff9e 	bl	80032b0 <vPortExitCritical>
                return pdPASS;
 8001374:	2301      	movs	r3, #1
 8001376:	e063      	b.n	8001440 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800137e:	f001 ff97 	bl	80032b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001382:	2300      	movs	r3, #0
 8001384:	e05c      	b.n	8001440 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4618      	mov	r0, r3
 8001392:	f001 f90f 	bl	80025b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800139a:	f001 ff89 	bl	80032b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800139e:	f000 fd1f 	bl	8001de0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013a2:	f001 ff59 	bl	8003258 <vPortEnterCritical>
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d103      	bne.n	80013bc <xQueueGenericSend+0x13c>
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d103      	bne.n	80013d2 <xQueueGenericSend+0x152>
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80013d2:	f001 ff6d 	bl	80032b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013d6:	1d3a      	adds	r2, r7, #4
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f8fe 	bl	80025e0 <xTaskCheckForTimeOut>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d124      	bne.n	8001434 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013ea:	6a38      	ldr	r0, [r7, #32]
 80013ec:	f000 fa96 	bl	800191c <prvIsQueueFull>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d018      	beq.n	8001428 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	3310      	adds	r3, #16
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ffa6 	bl	8002350 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f000 fa21 	bl	800184c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800140a:	f000 fcf7 	bl	8001dfc <xTaskResumeAll>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f af7c 	bne.w	800130e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001416:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <xQueueGenericSend+0x1cc>)
 8001418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	f3bf 8f6f 	isb	sy
 8001426:	e772      	b.n	800130e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001428:	6a38      	ldr	r0, [r7, #32]
 800142a:	f000 fa0f 	bl	800184c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800142e:	f000 fce5 	bl	8001dfc <xTaskResumeAll>
 8001432:	e76c      	b.n	800130e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001434:	6a38      	ldr	r0, [r7, #32]
 8001436:	f000 fa09 	bl	800184c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800143a:	f000 fcdf 	bl	8001dfc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800143e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001440:	4618      	mov	r0, r3
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	08003574 	.word	0x08003574
 800144c:	e000ed04 	.word	0xe000ed04

08001450 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	@ 0x38
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <xQueueGenericSendFromISR+0x22>
 8001468:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800146c:	4846      	ldr	r0, [pc, #280]	@ (8001588 <xQueueGenericSendFromISR+0x138>)
 800146e:	f7ff f8db 	bl	8000628 <assert_failed>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <xQueueGenericSendFromISR+0x30>
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <xQueueGenericSendFromISR+0x34>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <xQueueGenericSendFromISR+0x36>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <xQueueGenericSendFromISR+0x44>
 800148a:	f240 4121 	movw	r1, #1057	@ 0x421
 800148e:	483e      	ldr	r0, [pc, #248]	@ (8001588 <xQueueGenericSendFromISR+0x138>)
 8001490:	f7ff f8ca 	bl	8000628 <assert_failed>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d103      	bne.n	80014a2 <xQueueGenericSendFromISR+0x52>
 800149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800149c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <xQueueGenericSendFromISR+0x56>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <xQueueGenericSendFromISR+0x58>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <xQueueGenericSendFromISR+0x66>
 80014ac:	f240 4122 	movw	r1, #1058	@ 0x422
 80014b0:	4835      	ldr	r0, [pc, #212]	@ (8001588 <xQueueGenericSendFromISR+0x138>)
 80014b2:	f7ff f8b9 	bl	8000628 <assert_failed>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014b6:	f001 ffab 	bl	8003410 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80014ba:	f3ef 8211 	mrs	r2, BASEPRI
 80014be:	f04f 03a0 	mov.w	r3, #160	@ 0xa0
 80014c2:	b672      	cpsid	i
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	b662      	cpsie	i
 80014d2:	61fa      	str	r2, [r7, #28]
 80014d4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80014d6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d302      	bcc.n	80014ec <xQueueGenericSendFromISR+0x9c>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d140      	bne.n	800156e <xQueueGenericSendFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80014ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001502:	f000 f913 	bl	800172c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001506:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150e:	d112      	bne.n	8001536 <xQueueGenericSendFromISR+0xe6>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	2b00      	cmp	r3, #0
 8001516:	d027      	beq.n	8001568 <xQueueGenericSendFromISR+0x118>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151a:	3324      	adds	r3, #36	@ 0x24
 800151c:	4618      	mov	r0, r3
 800151e:	f000 ff79 	bl	8002414 <xTaskRemoveFromEventList>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01f      	beq.n	8001568 <xQueueGenericSendFromISR+0x118>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01c      	beq.n	8001568 <xQueueGenericSendFromISR+0x118>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e018      	b.n	8001568 <xQueueGenericSendFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8001536:	f000 fd69 	bl	800200c <uxTaskGetNumberOfTasks>
 800153a:	6238      	str	r0, [r7, #32]
 800153c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001540:	6a3a      	ldr	r2, [r7, #32]
 8001542:	429a      	cmp	r2, r3
 8001544:	d910      	bls.n	8001568 <xQueueGenericSendFromISR+0x118>
 8001546:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800154a:	2b7f      	cmp	r3, #127	@ 0x7f
 800154c:	d104      	bne.n	8001558 <xQueueGenericSendFromISR+0x108>
 800154e:	f240 41ab 	movw	r1, #1195	@ 0x4ab
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <xQueueGenericSendFromISR+0x138>)
 8001554:	f7ff f868 	bl	8000628 <assert_failed>
 8001558:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	b25a      	sxtb	r2, r3
 8001562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8001568:	2301      	movs	r3, #1
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 800156c:	e001      	b.n	8001572 <xQueueGenericSendFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	@ 0x34
 8001572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001574:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800157c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800157e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001580:	4618      	mov	r0, r3
 8001582:	3738      	adds	r7, #56	@ 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	08003574 	.word	0x08003574

0800158c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <xQueueReceive+0x24>
 80015a6:	f240 516b 	movw	r1, #1387	@ 0x56b
 80015aa:	485e      	ldr	r0, [pc, #376]	@ (8001724 <xQueueReceive+0x198>)
 80015ac:	f7ff f83c 	bl	8000628 <assert_failed>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <xQueueReceive+0x32>
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <xQueueReceive+0x36>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <xQueueReceive+0x38>
 80015c2:	2300      	movs	r3, #0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d104      	bne.n	80015d2 <xQueueReceive+0x46>
 80015c8:	f240 516f 	movw	r1, #1391	@ 0x56f
 80015cc:	4855      	ldr	r0, [pc, #340]	@ (8001724 <xQueueReceive+0x198>)
 80015ce:	f7ff f82b 	bl	8000628 <assert_failed>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015d2:	f001 f8fd 	bl	80027d0 <xTaskGetSchedulerState>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <xQueueReceive+0x56>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <xQueueReceive+0x5a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <xQueueReceive+0x5c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d104      	bne.n	80015f6 <xQueueReceive+0x6a>
 80015ec:	f240 5174 	movw	r1, #1396	@ 0x574
 80015f0:	484c      	ldr	r0, [pc, #304]	@ (8001724 <xQueueReceive+0x198>)
 80015f2:	f7ff f819 	bl	8000628 <assert_failed>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015f6:	f001 fe2f 	bl	8003258 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fe:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01f      	beq.n	8001646 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f000 f8f9 	bl	8001800 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00f      	beq.n	800163e <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	3310      	adds	r3, #16
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fef6 	bl	8002414 <xTaskRemoveFromEventList>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <xQueueReceive+0x19c>)
 8001630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800163e:	f001 fe37 	bl	80032b0 <vPortExitCritical>
                return pdPASS;
 8001642:	2301      	movs	r3, #1
 8001644:	e069      	b.n	800171a <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800164c:	f001 fe30 	bl	80032b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001650:	2300      	movs	r3, #0
 8001652:	e062      	b.n	800171a <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4618      	mov	r0, r3
 8001660:	f000 ffa8 	bl	80025b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001664:	2301      	movs	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001668:	f001 fe22 	bl	80032b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800166c:	f000 fbb8 	bl	8001de0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001670:	f001 fdf2 	bl	8003258 <vPortEnterCritical>
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d103      	bne.n	800168a <xQueueReceive+0xfe>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001690:	b25b      	sxtb	r3, r3
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001696:	d103      	bne.n	80016a0 <xQueueReceive+0x114>
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016a0:	f001 fe06 	bl	80032b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016a4:	1d3a      	adds	r2, r7, #4
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 ff97 	bl	80025e0 <xTaskCheckForTimeOut>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d123      	bne.n	8001700 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f000 f919 	bl	80018f0 <prvIsQueueEmpty>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d017      	beq.n	80016f4 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	3324      	adds	r3, #36	@ 0x24
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fe3f 	bl	8002350 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016d2:	6a38      	ldr	r0, [r7, #32]
 80016d4:	f000 f8ba 	bl	800184c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016d8:	f000 fb90 	bl	8001dfc <xTaskResumeAll>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d189      	bne.n	80015f6 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <xQueueReceive+0x19c>)
 80016e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	f3bf 8f6f 	isb	sy
 80016f2:	e780      	b.n	80015f6 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016f4:	6a38      	ldr	r0, [r7, #32]
 80016f6:	f000 f8a9 	bl	800184c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016fa:	f000 fb7f 	bl	8001dfc <xTaskResumeAll>
 80016fe:	e77a      	b.n	80015f6 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001700:	6a38      	ldr	r0, [r7, #32]
 8001702:	f000 f8a3 	bl	800184c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001706:	f000 fb79 	bl	8001dfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800170a:	6a38      	ldr	r0, [r7, #32]
 800170c:	f000 f8f0 	bl	80018f0 <prvIsQueueEmpty>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f43f af6f 	beq.w	80015f6 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001718:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800171a:	4618      	mov	r0, r3
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	08003574 	.word	0x08003574
 8001728:	e000ed04 	.word	0xe000ed04

0800172c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001740:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d14d      	bne.n	80017ee <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f858 	bl	800280c <xTaskPriorityDisinherit>
 800175c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e043      	b.n	80017ee <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6858      	ldr	r0, [r3, #4]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	461a      	mov	r2, r3
 8001776:	68b9      	ldr	r1, [r7, #8]
 8001778:	f001 feaa 	bl	80034d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	441a      	add	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d32b      	bcc.n	80017ee <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e026      	b.n	80017ee <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	68d8      	ldr	r0, [r3, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	461a      	mov	r2, r3
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	f001 fe90 	bl	80034d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	425b      	negs	r3, r3
 80017ba:	441a      	add	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	425b      	negs	r3, r3
 80017d6:	441a      	add	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d105      	bne.n	80017ee <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80017f6:	697b      	ldr	r3, [r7, #20]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d018      	beq.n	8001844 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	441a      	add	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d303      	bcc.n	8001834 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	461a      	mov	r2, r3
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f001 fe46 	bl	80034d0 <memcpy>
    }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001854:	f001 fd00 	bl	8003258 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800185e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001860:	e011      	b.n	8001886 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	2b00      	cmp	r3, #0
 8001868:	d012      	beq.n	8001890 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3324      	adds	r3, #36	@ 0x24
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fdd0 	bl	8002414 <xTaskRemoveFromEventList>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800187a:	f000 ff05 	bl	8002688 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	3b01      	subs	r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dce9      	bgt.n	8001862 <prvUnlockQueue+0x16>
 800188e:	e000      	b.n	8001892 <prvUnlockQueue+0x46>
                    break;
 8001890:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	22ff      	movs	r2, #255	@ 0xff
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800189a:	f001 fd09 	bl	80032b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800189e:	f001 fcdb 	bl	8003258 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018aa:	e011      	b.n	80018d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d012      	beq.n	80018da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3310      	adds	r3, #16
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fdab 	bl	8002414 <xTaskRemoveFromEventList>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80018c4:	f000 fee0 	bl	8002688 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dce9      	bgt.n	80018ac <prvUnlockQueue+0x60>
 80018d8:	e000      	b.n	80018dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	22ff      	movs	r2, #255	@ 0xff
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80018e4:	f001 fce4 	bl	80032b0 <vPortExitCritical>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018f8:	f001 fcae 	bl	8003258 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001904:	2301      	movs	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	e001      	b.n	800190e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800190e:	f001 fccf 	bl	80032b0 <vPortExitCritical>

    return xReturn;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001924:	f001 fc98 	bl	8003258 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001930:	429a      	cmp	r2, r3
 8001932:	d102      	bne.n	800193a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001934:	2301      	movs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e001      	b.n	800193e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800193e:	f001 fcb7 	bl	80032b0 <vPortExitCritical>

    return xReturn;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <vQueueAddToRegistry+0x1e>
 8001960:	f640 21d8 	movw	r1, #2776	@ 0xad8
 8001964:	481b      	ldr	r0, [pc, #108]	@ (80019d4 <vQueueAddToRegistry+0x88>)
 8001966:	f7fe fe5f 	bl	8000628 <assert_failed>

        if( pcQueueName != NULL )
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d024      	beq.n	80019ba <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e01e      	b.n	80019b4 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001976:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <vQueueAddToRegistry+0x8c>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	d105      	bne.n	8001992 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4a13      	ldr	r2, [pc, #76]	@ (80019d8 <vQueueAddToRegistry+0x8c>)
 800198c:	4413      	add	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
                    break;
 8001990:	e013      	b.n	80019ba <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <vQueueAddToRegistry+0x62>
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <vQueueAddToRegistry+0x8c>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d104      	bne.n	80019ae <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <vQueueAddToRegistry+0x8c>)
 80019aa:	4413      	add	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b09      	cmp	r3, #9
 80019b8:	d9dd      	bls.n	8001976 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08003574 	.word	0x08003574
 80019d8:	240011dc 	.word	0x240011dc

080019dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80019ec:	f001 fc34 	bl	8003258 <vPortEnterCritical>
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d103      	bne.n	8001a06 <vQueueWaitForMessageRestricted+0x2a>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a12:	d103      	bne.n	8001a1c <vQueueWaitForMessageRestricted+0x40>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a1c:	f001 fc48 	bl	80032b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3324      	adds	r3, #36	@ 0x24
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fcad 	bl	8002390 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff08 	bl	800184c <prvUnlockQueue>
    }
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8001a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d104      	bne.n	8001a62 <xTaskCreateStatic+0x1e>
 8001a58:	f240 213f 	movw	r1, #575	@ 0x23f
 8001a5c:	481f      	ldr	r0, [pc, #124]	@ (8001adc <xTaskCreateStatic+0x98>)
 8001a5e:	f7fe fde3 	bl	8000628 <assert_failed>
        configASSERT( pxTaskBuffer != NULL );
 8001a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d104      	bne.n	8001a72 <xTaskCreateStatic+0x2e>
 8001a68:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001a6c:	481b      	ldr	r0, [pc, #108]	@ (8001adc <xTaskCreateStatic+0x98>)
 8001a6e:	f7fe fddb 	bl	8000628 <assert_failed>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8001a72:	234c      	movs	r3, #76	@ 0x4c
 8001a74:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a7a:	d004      	beq.n	8001a86 <xTaskCreateStatic+0x42>
 8001a7c:	f44f 7112 	mov.w	r1, #584	@ 0x248
 8001a80:	4816      	ldr	r0, [pc, #88]	@ (8001adc <xTaskCreateStatic+0x98>)
 8001a82:	f7fe fdd1 	bl	8000628 <assert_failed>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a86:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01f      	beq.n	8001ace <xTaskCreateStatic+0x8a>
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <xTaskCreateStatic+0x8a>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001a98:	224c      	movs	r2, #76	@ 0x4c
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	69f8      	ldr	r0, [r7, #28]
 8001a9e:	f001 fceb 	bl	8003478 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9303      	str	r3, [sp, #12]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f80d 	bl	8001ae0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001ac6:	69f8      	ldr	r0, [r7, #28]
 8001ac8:	f000 f88e 	bl	8001be8 <prvAddNewTaskToReadyList>
 8001acc:	e001      	b.n	8001ad2 <xTaskCreateStatic+0x8e>
        }
        else
        {
            xReturn = NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001ad2:	69bb      	ldr	r3, [r7, #24]
    }
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	080035f0 	.word	0x080035f0

08001ae0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	21a5      	movs	r1, #165	@ 0xa5
 8001afa:	f001 fcbd 	bl	8003478 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001b08:	440b      	add	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f023 0307 	bic.w	r3, r3, #7
 8001b16:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <prvInitialiseNewTask+0x4c>
 8001b22:	f240 315d 	movw	r1, #861	@ 0x35d
 8001b26:	482f      	ldr	r0, [pc, #188]	@ (8001be4 <prvInitialiseNewTask+0x104>)
 8001b28:	f7fe fd7e 	bl	8000628 <assert_failed>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01e      	beq.n	8001b70 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e012      	b.n	8001b5e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	7819      	ldrb	r1, [r3, #0]
 8001b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	4413      	add	r3, r2
 8001b46:	3334      	adds	r3, #52	@ 0x34
 8001b48:	460a      	mov	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d9e9      	bls.n	8001b38 <prvInitialiseNewTask+0x58>
 8001b64:	e000      	b.n	8001b68 <prvInitialiseNewTask+0x88>
            {
                break;
 8001b66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	2b1f      	cmp	r3, #31
 8001b74:	d904      	bls.n	8001b80 <prvInitialiseNewTask+0xa0>
 8001b76:	f240 3192 	movw	r1, #914	@ 0x392
 8001b7a:	481a      	ldr	r0, [pc, #104]	@ (8001be4 <prvInitialiseNewTask+0x104>)
 8001b7c:	f7fe fd54 	bl	8000628 <assert_failed>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2b1f      	cmp	r3, #31
 8001b84:	d901      	bls.n	8001b8a <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b86:	231f      	movs	r3, #31
 8001b88:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	6a3a      	ldr	r2, [r7, #32]
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b98:	3304      	adds	r3, #4
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fa10 	bl	8000fc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fa0b 	bl	8000fc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f1c3 0220 	rsb	r2, r3, #32
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	6938      	ldr	r0, [r7, #16]
 8001bc6:	f001 fa53 	bl	8003070 <pxPortInitialiseStack>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	080035f0 	.word	0x080035f0

08001be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001bf0:	f001 fb32 	bl	8003258 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <prvAddNewTaskToReadyList+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf0 <prvAddNewTaskToReadyList+0x108>)
 8001bfc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <prvAddNewTaskToReadyList+0x10c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c06:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf4 <prvAddNewTaskToReadyList+0x10c>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <prvAddNewTaskToReadyList+0x108>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d110      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c14:	f000 fd4e 	bl	80026b4 <prvInitialiseTaskLists>
 8001c18:	e00d      	b.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <prvAddNewTaskToReadyList+0x110>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c22:	4b34      	ldr	r3, [pc, #208]	@ (8001cf4 <prvAddNewTaskToReadyList+0x10c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d802      	bhi.n	8001c36 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c30:	4a30      	ldr	r2, [pc, #192]	@ (8001cf4 <prvAddNewTaskToReadyList+0x10c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c36:	4b31      	ldr	r3, [pc, #196]	@ (8001cfc <prvAddNewTaskToReadyList+0x114>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001cfc <prvAddNewTaskToReadyList+0x114>)
 8001c3e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	2201      	movs	r2, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <prvAddNewTaskToReadyList+0x118>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001d00 <prvAddNewTaskToReadyList+0x118>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c56:	492b      	ldr	r1, [pc, #172]	@ (8001d04 <prvAddNewTaskToReadyList+0x11c>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	3304      	adds	r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	3204      	adds	r2, #4
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1d1a      	adds	r2, r3, #4
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <prvAddNewTaskToReadyList+0x11c>)
 8001c96:	441a      	add	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca0:	4918      	ldr	r1, [pc, #96]	@ (8001d04 <prvAddNewTaskToReadyList+0x11c>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <prvAddNewTaskToReadyList+0x11c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4403      	add	r3, r0
 8001cbc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001cbe:	f001 faf7 	bl	80032b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <prvAddNewTaskToReadyList+0x110>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <prvAddNewTaskToReadyList+0x10c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <prvAddNewTaskToReadyList+0x120>)
 8001cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2400150c 	.word	0x2400150c
 8001cf4:	2400122c 	.word	0x2400122c
 8001cf8:	24001518 	.word	0x24001518
 8001cfc:	24001528 	.word	0x24001528
 8001d00:	24001514 	.word	0x24001514
 8001d04:	24001230 	.word	0x24001230
 8001d08:	e000ed04 	.word	0xe000ed04

08001d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d1a:	1d3a      	adds	r2, r7, #4
 8001d1c:	f107 0108 	add.w	r1, r7, #8
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fb47 	bl	80003b8 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	9202      	str	r2, [sp, #8]
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	2300      	movs	r3, #0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	4920      	ldr	r1, [pc, #128]	@ (8001dc0 <vTaskStartScheduler+0xb4>)
 8001d3e:	4821      	ldr	r0, [pc, #132]	@ (8001dc4 <vTaskStartScheduler+0xb8>)
 8001d40:	f7ff fe80 	bl	8001a44 <xTaskCreateStatic>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <vTaskStartScheduler+0xbc>)
 8001d48:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <vTaskStartScheduler+0xbc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <vTaskStartScheduler+0x4c>
        {
            xReturn = pdPASS;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e001      	b.n	8001d5c <vTaskStartScheduler+0x50>
        }
        else
        {
            xReturn = pdFAIL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 8001d62:	f000 fe3f 	bl	80029e4 <xTimerCreateTimerTask>
 8001d66:	6178      	str	r0, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d118      	bne.n	8001da0 <vTaskStartScheduler+0x94>
        __asm volatile
 8001d6e:	f04f 03a0 	mov.w	r3, #160	@ 0xa0
 8001d72:	b672      	cpsid	i
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	b662      	cpsie	i
 8001d82:	613b      	str	r3, [r7, #16]
    }
 8001d84:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d86:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <vTaskStartScheduler+0xc0>)
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <vTaskStartScheduler+0xc4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <vTaskStartScheduler+0xc8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001d9a:	f001 f9f3 	bl	8003184 <xPortStartScheduler>
 8001d9e:	e008      	b.n	8001db2 <vTaskStartScheduler+0xa6>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d104      	bne.n	8001db2 <vTaskStartScheduler+0xa6>
 8001da8:	f640 0112 	movw	r1, #2066	@ 0x812
 8001dac:	480a      	ldr	r0, [pc, #40]	@ (8001dd8 <vTaskStartScheduler+0xcc>)
 8001dae:	f7fe fc3b 	bl	8000628 <assert_failed>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <vTaskStartScheduler+0xd0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800366c 	.word	0x0800366c
 8001dc4:	080026a1 	.word	0x080026a1
 8001dc8:	24001530 	.word	0x24001530
 8001dcc:	2400152c 	.word	0x2400152c
 8001dd0:	24001518 	.word	0x24001518
 8001dd4:	24001510 	.word	0x24001510
 8001dd8:	080035f0 	.word	0x080035f0
 8001ddc:	2400000c 	.word	0x2400000c

08001de0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <vTaskSuspendAll+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <vTaskSuspendAll+0x18>)
 8001dec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	24001534 	.word	0x24001534

08001dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001fc4 <xTaskResumeAll+0x1c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <xTaskResumeAll+0x20>
 8001e12:	f640 0185 	movw	r1, #2181	@ 0x885
 8001e16:	486c      	ldr	r0, [pc, #432]	@ (8001fc8 <xTaskResumeAll+0x1cc>)
 8001e18:	f7fe fc06 	bl	8000628 <assert_failed>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e1c:	f001 fa1c 	bl	8003258 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e20:	4b68      	ldr	r3, [pc, #416]	@ (8001fc4 <xTaskResumeAll+0x1c8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	4a67      	ldr	r2, [pc, #412]	@ (8001fc4 <xTaskResumeAll+0x1c8>)
 8001e28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e2a:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <xTaskResumeAll+0x1c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80c0 	bne.w	8001fb4 <xTaskResumeAll+0x1b8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e34:	4b65      	ldr	r3, [pc, #404]	@ (8001fcc <xTaskResumeAll+0x1d0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80bb 	beq.w	8001fb4 <xTaskResumeAll+0x1b8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e3e:	e08a      	b.n	8001f56 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e40:	4b63      	ldr	r3, [pc, #396]	@ (8001fd0 <xTaskResumeAll+0x1d4>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	6a12      	ldr	r2, [r2, #32]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	69d2      	ldr	r2, [r2, #28]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d103      	bne.n	8001e76 <xTaskResumeAll+0x7a>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	68d2      	ldr	r2, [r2, #12]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	6892      	ldr	r2, [r2, #8]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d103      	bne.n	8001eb4 <xTaskResumeAll+0xb8>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	2201      	movs	r2, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <xTaskResumeAll+0x1d8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	4a40      	ldr	r2, [pc, #256]	@ (8001fd4 <xTaskResumeAll+0x1d8>)
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eda:	493f      	ldr	r1, [pc, #252]	@ (8001fd8 <xTaskResumeAll+0x1dc>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	3204      	adds	r2, #4
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1d1a      	adds	r2, r3, #4
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <xTaskResumeAll+0x1dc>)
 8001f1a:	441a      	add	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f24:	492c      	ldr	r1, [pc, #176]	@ (8001fd8 <xTaskResumeAll+0x1dc>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	4828      	ldr	r0, [pc, #160]	@ (8001fd8 <xTaskResumeAll+0x1dc>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4403      	add	r3, r0
 8001f40:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f46:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <xTaskResumeAll+0x1e0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d302      	bcc.n	8001f56 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <xTaskResumeAll+0x1e4>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <xTaskResumeAll+0x1d4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f af70 	bne.w	8001e40 <xTaskResumeAll+0x44>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001f66:	f000 fc17 	bl	8002798 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <xTaskResumeAll+0x1e8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001f76:	f000 f855 	bl	8002024 <xTaskIncrementTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <xTaskResumeAll+0x1e4>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f1      	bne.n	8001f76 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <xTaskResumeAll+0x1e8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <xTaskResumeAll+0x1e4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <xTaskResumeAll+0x1b8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001fa4:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <xTaskResumeAll+0x1ec>)
 8001fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001fb4:	f001 f97c 	bl	80032b0 <vPortExitCritical>

    return xAlreadyYielded;
 8001fb8:	693b      	ldr	r3, [r7, #16]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	24001534 	.word	0x24001534
 8001fc8:	080035f0 	.word	0x080035f0
 8001fcc:	2400150c 	.word	0x2400150c
 8001fd0:	240014e0 	.word	0x240014e0
 8001fd4:	24001514 	.word	0x24001514
 8001fd8:	24001230 	.word	0x24001230
 8001fdc:	2400122c 	.word	0x2400122c
 8001fe0:	24001520 	.word	0x24001520
 8001fe4:	2400151c 	.word	0x2400151c
 8001fe8:	e000ed04 	.word	0xe000ed04

08001fec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <xTaskGetTickCount+0x1c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24001510 	.word	0x24001510

0800200c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <uxTaskGetNumberOfTasks+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2400150c 	.word	0x2400150c

08002024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800202e:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <xTaskIncrementTick+0x204>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80ec 	bne.w	8002210 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002038:	4b7c      	ldr	r3, [pc, #496]	@ (800222c <xTaskIncrementTick+0x208>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002040:	4a7a      	ldr	r2, [pc, #488]	@ (800222c <xTaskIncrementTick+0x208>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11a      	bne.n	8002082 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800204c:	4b78      	ldr	r3, [pc, #480]	@ (8002230 <xTaskIncrementTick+0x20c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <xTaskIncrementTick+0x3c>
 8002056:	f640 21b7 	movw	r1, #2743	@ 0xab7
 800205a:	4876      	ldr	r0, [pc, #472]	@ (8002234 <xTaskIncrementTick+0x210>)
 800205c:	f7fe fae4 	bl	8000628 <assert_failed>
 8002060:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <xTaskIncrementTick+0x20c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	4b74      	ldr	r3, [pc, #464]	@ (8002238 <xTaskIncrementTick+0x214>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a71      	ldr	r2, [pc, #452]	@ (8002230 <xTaskIncrementTick+0x20c>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4a72      	ldr	r2, [pc, #456]	@ (8002238 <xTaskIncrementTick+0x214>)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b71      	ldr	r3, [pc, #452]	@ (800223c <xTaskIncrementTick+0x218>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a70      	ldr	r2, [pc, #448]	@ (800223c <xTaskIncrementTick+0x218>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	f000 fb8b 	bl	8002798 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002082:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <xTaskIncrementTick+0x21c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	429a      	cmp	r2, r3
 800208a:	f0c0 80a6 	bcc.w	80021da <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800208e:	4b68      	ldr	r3, [pc, #416]	@ (8002230 <xTaskIncrementTick+0x20c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d104      	bne.n	80020a2 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002098:	4b69      	ldr	r3, [pc, #420]	@ (8002240 <xTaskIncrementTick+0x21c>)
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	601a      	str	r2, [r3, #0]
                    break;
 80020a0:	e09b      	b.n	80021da <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a2:	4b63      	ldr	r3, [pc, #396]	@ (8002230 <xTaskIncrementTick+0x20c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d203      	bcs.n	80020c2 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020ba:	4a61      	ldr	r2, [pc, #388]	@ (8002240 <xTaskIncrementTick+0x21c>)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80020c0:	e08b      	b.n	80021da <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68d2      	ldr	r2, [r2, #12]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3304      	adds	r3, #4
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d103      	bne.n	80020f0 <xTaskIncrementTick+0xcc>
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1e5a      	subs	r2, r3, #1
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01e      	beq.n	8002146 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	6a12      	ldr	r2, [r2, #32]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	69d2      	ldr	r2, [r2, #28]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	3318      	adds	r3, #24
 800212a:	429a      	cmp	r2, r3
 800212c:	d103      	bne.n	8002136 <xTaskIncrementTick+0x112>
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	2201      	movs	r2, #1
 800214c:	409a      	lsls	r2, r3
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <xTaskIncrementTick+0x220>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	4a3b      	ldr	r2, [pc, #236]	@ (8002244 <xTaskIncrementTick+0x220>)
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800215c:	493a      	ldr	r1, [pc, #232]	@ (8002248 <xTaskIncrementTick+0x224>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3304      	adds	r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	3204      	adds	r2, #4
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1d1a      	adds	r2, r3, #4
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4a2b      	ldr	r2, [pc, #172]	@ (8002248 <xTaskIncrementTick+0x224>)
 800219c:	441a      	add	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	615a      	str	r2, [r3, #20]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a6:	4928      	ldr	r1, [pc, #160]	@ (8002248 <xTaskIncrementTick+0x224>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	4824      	ldr	r0, [pc, #144]	@ (8002248 <xTaskIncrementTick+0x224>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4403      	add	r3, r0
 80021c2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <xTaskIncrementTick+0x228>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	f67f af5d 	bls.w	800208e <xTaskIncrementTick+0x6a>
                        {
                            xSwitchRequired = pdTRUE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021d8:	e759      	b.n	800208e <xTaskIncrementTick+0x6a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <xTaskIncrementTick+0x228>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e0:	4919      	ldr	r1, [pc, #100]	@ (8002248 <xTaskIncrementTick+0x224>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d901      	bls.n	80021f6 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
 80021f6:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <xTaskIncrementTick+0x22c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <xTaskIncrementTick+0x1de>
            {
                vApplicationTickHook();
 80021fe:	f7fe f86f 	bl	80002e0 <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002202:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <xTaskIncrementTick+0x230>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <xTaskIncrementTick+0x1fa>
            {
                xSwitchRequired = pdTRUE;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e006      	b.n	800221e <xTaskIncrementTick+0x1fa>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002210:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <xTaskIncrementTick+0x22c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <xTaskIncrementTick+0x22c>)
 8002218:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
 800221a:	f7fe f861 	bl	80002e0 <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
 800221e:	69fb      	ldr	r3, [r7, #28]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	24001534 	.word	0x24001534
 800222c:	24001510 	.word	0x24001510
 8002230:	240014d8 	.word	0x240014d8
 8002234:	080035f0 	.word	0x080035f0
 8002238:	240014dc 	.word	0x240014dc
 800223c:	24001524 	.word	0x24001524
 8002240:	2400152c 	.word	0x2400152c
 8002244:	24001514 	.word	0x24001514
 8002248:	24001230 	.word	0x24001230
 800224c:	2400122c 	.word	0x2400122c
 8002250:	2400151c 	.word	0x2400151c
 8002254:	24001520 	.word	0x24001520

08002258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <vTaskSwitchContext+0xe0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002266:	4b35      	ldr	r3, [pc, #212]	@ (800233c <vTaskSwitchContext+0xe4>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800226c:	e060      	b.n	8002330 <vTaskSwitchContext+0xd8>
        xYieldPending = pdFALSE;
 800226e:	4b33      	ldr	r3, [pc, #204]	@ (800233c <vTaskSwitchContext+0xe4>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <vTaskSwitchContext+0xe8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d111      	bne.n	80022b0 <vTaskSwitchContext+0x58>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3304      	adds	r3, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d10b      	bne.n	80022b0 <vTaskSwitchContext+0x58>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3308      	adds	r3, #8
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d105      	bne.n	80022b0 <vTaskSwitchContext+0x58>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	330c      	adds	r3, #12
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d008      	beq.n	80022c2 <vTaskSwitchContext+0x6a>
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <vTaskSwitchContext+0xe8>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <vTaskSwitchContext+0xe8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3334      	adds	r3, #52	@ 0x34
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f7fe f870 	bl	80003a2 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <vTaskSwitchContext+0xec>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f1c3 031f 	rsb	r3, r3, #31
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	491b      	ldr	r1, [pc, #108]	@ (8002348 <vTaskSwitchContext+0xf0>)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <vTaskSwitchContext+0x9e>
 80022ec:	f640 31f6 	movw	r1, #3062	@ 0xbf6
 80022f0:	4816      	ldr	r0, [pc, #88]	@ (800234c <vTaskSwitchContext+0xf4>)
 80022f2:	f7fe f999 	bl	8000628 <assert_failed>
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <vTaskSwitchContext+0xf0>)
 8002302:	4413      	add	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3308      	adds	r3, #8
 8002318:	429a      	cmp	r2, r3
 800231a:	d104      	bne.n	8002326 <vTaskSwitchContext+0xce>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <vTaskSwitchContext+0xe8>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	24001534 	.word	0x24001534
 800233c:	24001520 	.word	0x24001520
 8002340:	2400122c 	.word	0x2400122c
 8002344:	24001514 	.word	0x24001514
 8002348:	24001230 	.word	0x24001230
 800234c:	080035f0 	.word	0x080035f0

08002350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <vTaskPlaceOnEventList+0x1a>
 8002360:	f640 410e 	movw	r1, #3086	@ 0xc0e
 8002364:	4808      	ldr	r0, [pc, #32]	@ (8002388 <vTaskPlaceOnEventList+0x38>)
 8002366:	f7fe f95f 	bl	8000628 <assert_failed>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <vTaskPlaceOnEventList+0x3c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3318      	adds	r3, #24
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fe31 	bl	8000fda <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002378:	2101      	movs	r1, #1
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f000 fade 	bl	800293c <prvAddCurrentTaskToDelayedList>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	080035f0 	.word	0x080035f0
 800238c:	2400122c 	.word	0x2400122c

08002390 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <vTaskPlaceOnEventListRestricted+0x1c>
 80023a2:	f640 4144 	movw	r1, #3140	@ 0xc44
 80023a6:	4819      	ldr	r0, [pc, #100]	@ (800240c <vTaskPlaceOnEventListRestricted+0x7c>)
 80023a8:	f7fe f93e 	bl	8000628 <assert_failed>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <vTaskPlaceOnEventListRestricted+0x80>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	61da      	str	r2, [r3, #28]
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <vTaskPlaceOnEventListRestricted+0x80>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <vTaskPlaceOnEventListRestricted+0x80>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	3218      	adds	r2, #24
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <vTaskPlaceOnEventListRestricted+0x80>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f103 0218 	add.w	r2, r3, #24
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <vTaskPlaceOnEventListRestricted+0x80>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <vTaskPlaceOnEventListRestricted+0x6a>
        {
            xTicksToWait = portMAX_DELAY;
 80023f4:	f04f 33ff 	mov.w	r3, #4294967295
 80023f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f000 fa9d 	bl	800293c <prvAddCurrentTaskToDelayedList>
    }
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	080035f0 	.word	0x080035f0
 8002410:	2400122c 	.word	0x2400122c

08002414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d104      	bne.n	8002434 <xTaskRemoveFromEventList+0x20>
 800242a:	f640 4174 	movw	r1, #3188	@ 0xc74
 800242e:	485a      	ldr	r0, [pc, #360]	@ (8002598 <xTaskRemoveFromEventList+0x184>)
 8002430:	f7fe f8fa 	bl	8000628 <assert_failed>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	6a12      	ldr	r2, [r2, #32]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	69d2      	ldr	r2, [r2, #28]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3318      	adds	r3, #24
 8002456:	429a      	cmp	r2, r3
 8002458:	d103      	bne.n	8002462 <xTaskRemoveFromEventList+0x4e>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <xTaskRemoveFromEventList+0x188>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d15e      	bne.n	8002538 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	68d2      	ldr	r2, [r2, #12]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3304      	adds	r3, #4
 800249c:	429a      	cmp	r2, r3
 800249e:	d103      	bne.n	80024a8 <xTaskRemoveFromEventList+0x94>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	2201      	movs	r2, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <xTaskRemoveFromEventList+0x18c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	4a36      	ldr	r2, [pc, #216]	@ (80025a0 <xTaskRemoveFromEventList+0x18c>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ce:	4935      	ldr	r1, [pc, #212]	@ (80025a4 <xTaskRemoveFromEventList+0x190>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3304      	adds	r3, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	3204      	adds	r2, #4
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <xTaskRemoveFromEventList+0x190>)
 800250e:	441a      	add	r2, r3
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002518:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <xTaskRemoveFromEventList+0x190>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	481e      	ldr	r0, [pc, #120]	@ (80025a4 <xTaskRemoveFromEventList+0x190>)
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4403      	add	r3, r0
 8002534:	6019      	str	r1, [r3, #0]
 8002536:	e01b      	b.n	8002570 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <xTaskRemoveFromEventList+0x194>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	61da      	str	r2, [r3, #28]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	3218      	adds	r2, #24
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f103 0218 	add.w	r2, r3, #24
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4a11      	ldr	r2, [pc, #68]	@ (80025a8 <xTaskRemoveFromEventList+0x194>)
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <xTaskRemoveFromEventList+0x194>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <xTaskRemoveFromEventList+0x194>)
 800256e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002574:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <xTaskRemoveFromEventList+0x198>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	429a      	cmp	r2, r3
 800257c:	d905      	bls.n	800258a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <xTaskRemoveFromEventList+0x19c>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e001      	b.n	800258e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800258e:	69fb      	ldr	r3, [r7, #28]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	080035f0 	.word	0x080035f0
 800259c:	24001534 	.word	0x24001534
 80025a0:	24001514 	.word	0x24001514
 80025a4:	24001230 	.word	0x24001230
 80025a8:	240014e0 	.word	0x240014e0
 80025ac:	2400122c 	.word	0x2400122c
 80025b0:	24001520 	.word	0x24001520

080025b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <vTaskInternalSetTimeOutState+0x24>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <vTaskInternalSetTimeOutState+0x28>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	605a      	str	r2, [r3, #4]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	24001524 	.word	0x24001524
 80025dc:	24001510 	.word	0x24001510

080025e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <xTaskCheckForTimeOut+0x1a>
 80025f0:	f640 41ef 	movw	r1, #3311	@ 0xcef
 80025f4:	4821      	ldr	r0, [pc, #132]	@ (800267c <xTaskCheckForTimeOut+0x9c>)
 80025f6:	f7fe f817 	bl	8000628 <assert_failed>
    configASSERT( pxTicksToWait );
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <xTaskCheckForTimeOut+0x2a>
 8002600:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8002604:	481d      	ldr	r0, [pc, #116]	@ (800267c <xTaskCheckForTimeOut+0x9c>)
 8002606:	f7fe f80f 	bl	8000628 <assert_failed>

    taskENTER_CRITICAL();
 800260a:	f000 fe25 	bl	8003258 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <xTaskCheckForTimeOut+0xa0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	60fb      	str	r3, [r7, #12]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <xTaskCheckForTimeOut+0xa4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d00a      	beq.n	8002640 <xTaskCheckForTimeOut+0x60>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d305      	bcc.n	8002640 <xTaskCheckForTimeOut+0x60>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e015      	b.n	800266c <xTaskCheckForTimeOut+0x8c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	429a      	cmp	r2, r3
 8002648:	d20b      	bcs.n	8002662 <xTaskCheckForTimeOut+0x82>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad2      	subs	r2, r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffac 	bl	80025b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e004      	b.n	800266c <xTaskCheckForTimeOut+0x8c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002668:	2301      	movs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800266c:	f000 fe20 	bl	80032b0 <vPortExitCritical>

    return xReturn;
 8002670:	697b      	ldr	r3, [r7, #20]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	080035f0 	.word	0x080035f0
 8002680:	24001510 	.word	0x24001510
 8002684:	24001524 	.word	0x24001524

08002688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <vTaskMissedYield+0x14>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	24001520 	.word	0x24001520

080026a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026a8:	f000 f83e 	bl	8002728 <prvCheckTasksWaitingTermination>
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80026ac:	f7fd fe72 	bl	8000394 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80026b0:	bf00      	nop
 80026b2:	e7f9      	b.n	80026a8 <prvIdleTask+0x8>

080026b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	e00c      	b.n	80026da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4a10      	ldr	r2, [pc, #64]	@ (800270c <prvInitialiseTaskLists+0x58>)
 80026cc:	4413      	add	r3, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fc56 	bl	8000f80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3301      	adds	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b1f      	cmp	r3, #31
 80026de:	d9ef      	bls.n	80026c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80026e0:	480b      	ldr	r0, [pc, #44]	@ (8002710 <prvInitialiseTaskLists+0x5c>)
 80026e2:	f7fe fc4d 	bl	8000f80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80026e6:	480b      	ldr	r0, [pc, #44]	@ (8002714 <prvInitialiseTaskLists+0x60>)
 80026e8:	f7fe fc4a 	bl	8000f80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80026ec:	480a      	ldr	r0, [pc, #40]	@ (8002718 <prvInitialiseTaskLists+0x64>)
 80026ee:	f7fe fc47 	bl	8000f80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80026f2:	480a      	ldr	r0, [pc, #40]	@ (800271c <prvInitialiseTaskLists+0x68>)
 80026f4:	f7fe fc44 	bl	8000f80 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <prvInitialiseTaskLists+0x6c>)
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <prvInitialiseTaskLists+0x5c>)
 80026fc:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <prvInitialiseTaskLists+0x70>)
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <prvInitialiseTaskLists+0x60>)
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	24001230 	.word	0x24001230
 8002710:	240014b0 	.word	0x240014b0
 8002714:	240014c4 	.word	0x240014c4
 8002718:	240014e0 	.word	0x240014e0
 800271c:	240014f4 	.word	0x240014f4
 8002720:	240014d8 	.word	0x240014d8
 8002724:	240014dc 	.word	0x240014dc

08002728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800272e:	e019      	b.n	8002764 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002730:	f000 fd92 	bl	8003258 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002734:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <prvCheckTasksWaitingTermination+0x50>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fc83 	bl	800104c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <prvCheckTasksWaitingTermination+0x54>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <prvCheckTasksWaitingTermination+0x54>)
 800274e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <prvCheckTasksWaitingTermination+0x58>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <prvCheckTasksWaitingTermination+0x58>)
 8002758:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800275a:	f000 fda9 	bl	80032b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f810 	bl	8002784 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <prvCheckTasksWaitingTermination+0x58>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e1      	bne.n	8002730 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	240014f4 	.word	0x240014f4
 800277c:	2400150c 	.word	0x2400150c
 8002780:	24001508 	.word	0x24001508

08002784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <prvResetNextTaskUnblockTime+0x30>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <prvResetNextTaskUnblockTime+0x34>)
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027ae:	e005      	b.n	80027bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <prvResetNextTaskUnblockTime+0x30>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <prvResetNextTaskUnblockTime+0x34>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	240014d8 	.word	0x240014d8
 80027cc:	2400152c 	.word	0x2400152c

080027d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <xTaskGetSchedulerState+0x34>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80027de:	2301      	movs	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	e008      	b.n	80027f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <xTaskGetSchedulerState+0x38>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80027ec:	2302      	movs	r3, #2
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	e001      	b.n	80027f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80027f6:	687b      	ldr	r3, [r7, #4]
    }
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	24001518 	.word	0x24001518
 8002808:	24001534 	.word	0x24001534

0800280c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d07f      	beq.n	8002922 <xTaskPriorityDisinherit+0x116>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002822:	4b42      	ldr	r3, [pc, #264]	@ (800292c <xTaskPriorityDisinherit+0x120>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d004      	beq.n	8002836 <xTaskPriorityDisinherit+0x2a>
 800282c:	f241 0148 	movw	r1, #4168	@ 0x1048
 8002830:	483f      	ldr	r0, [pc, #252]	@ (8002930 <xTaskPriorityDisinherit+0x124>)
 8002832:	f7fd fef9 	bl	8000628 <assert_failed>
            configASSERT( pxTCB->uxMutexesHeld );
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <xTaskPriorityDisinherit+0x3c>
 800283e:	f241 0149 	movw	r1, #4169	@ 0x1049
 8002842:	483b      	ldr	r0, [pc, #236]	@ (8002930 <xTaskPriorityDisinherit+0x124>)
 8002844:	f7fd fef0 	bl	8000628 <assert_failed>
            ( pxTCB->uxMutexesHeld )--;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285a:	429a      	cmp	r2, r3
 800285c:	d061      	beq.n	8002922 <xTaskPriorityDisinherit+0x116>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15d      	bne.n	8002922 <xTaskPriorityDisinherit+0x116>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	3304      	adds	r3, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fbee 	bl	800104c <uxListRemove>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	2201      	movs	r2, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <xTaskPriorityDisinherit+0x128>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4013      	ands	r3, r2
 8002888:	4a2a      	ldr	r2, [pc, #168]	@ (8002934 <xTaskPriorityDisinherit+0x128>)
 800288a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	f1c3 0220 	rsb	r2, r3, #32
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <xTaskPriorityDisinherit+0x128>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <xTaskPriorityDisinherit+0x128>)
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b6:	4920      	ldr	r1, [pc, #128]	@ (8002938 <xTaskPriorityDisinherit+0x12c>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	3204      	adds	r2, #4
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1d1a      	adds	r2, r3, #4
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <xTaskPriorityDisinherit+0x12c>)
 80028f6:	441a      	add	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	615a      	str	r2, [r3, #20]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002900:	490d      	ldr	r1, [pc, #52]	@ (8002938 <xTaskPriorityDisinherit+0x12c>)
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	1c59      	adds	r1, r3, #1
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <xTaskPriorityDisinherit+0x12c>)
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002922:	697b      	ldr	r3, [r7, #20]
    }
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2400122c 	.word	0x2400122c
 8002930:	080035f0 	.word	0x080035f0
 8002934:	24001514 	.word	0x24001514
 8002938:	24001230 	.word	0x24001230

0800293c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002946:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <prvAddCurrentTaskToDelayedList+0x90>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800294c:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fb7a 	bl	800104c <uxListRemove>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800295e:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	2201      	movs	r2, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4013      	ands	r3, r2
 8002972:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002974:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800297e:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	429a      	cmp	r2, r3
 800298c:	d209      	bcs.n	80029a2 <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7fe fb1d 	bl	8000fda <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80029a0:	e010      	b.n	80029c4 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f7fe fb13 	bl	8000fda <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d202      	bcs.n	80029c4 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 80029be:	4a08      	ldr	r2, [pc, #32]	@ (80029e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	24001510 	.word	0x24001510
 80029d0:	2400122c 	.word	0x2400122c
 80029d4:	24001514 	.word	0x24001514
 80029d8:	240014dc 	.word	0x240014dc
 80029dc:	240014d8 	.word	0x240014d8
 80029e0:	2400152c 	.word	0x2400152c

080029e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80029ee:	f000 faff 	bl	8002ff0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <xTimerCreateTimerTask+0x74>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002a02:	463a      	mov	r2, r7
 8002a04:	1d39      	adds	r1, r7, #4
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fcee 	bl	80003ec <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	9202      	str	r2, [sp, #8]
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	460a      	mov	r2, r1
 8002a22:	490e      	ldr	r1, [pc, #56]	@ (8002a5c <xTimerCreateTimerTask+0x78>)
 8002a24:	480e      	ldr	r0, [pc, #56]	@ (8002a60 <xTimerCreateTimerTask+0x7c>)
 8002a26:	f7ff f80d 	bl	8001a44 <xTaskCreateStatic>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <xTimerCreateTimerTask+0x80>)
 8002a2e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <xTimerCreateTimerTask+0x80>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <xTimerCreateTimerTask+0x68>
 8002a42:	f240 1119 	movw	r1, #281	@ 0x119
 8002a46:	4808      	ldr	r0, [pc, #32]	@ (8002a68 <xTimerCreateTimerTask+0x84>)
 8002a48:	f7fd fdee 	bl	8000628 <assert_failed>
        return xReturn;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    }
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	24001568 	.word	0x24001568
 8002a5c:	08003674 	.word	0x08003674
 8002a60:	08002c75 	.word	0x08002c75
 8002a64:	2400156c 	.word	0x2400156c
 8002a68:	0800367c 	.word	0x0800367c

08002a6c <xTimerCreateStatic>:
                                          const TickType_t xTimerPeriodInTicks,
                                          const BaseType_t xAutoReload,
                                          void * const pvTimerID,
                                          TimerCallbackFunction_t pxCallbackFunction,
                                          StaticTimer_t * pxTimerBuffer )
        {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTimer_t equals the size of the real timer
                 * structure. */
                volatile size_t xSize = sizeof( StaticTimer_t );
 8002a7a:	2328      	movs	r3, #40	@ 0x28
 8002a7c:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Timer_t ) );
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b28      	cmp	r3, #40	@ 0x28
 8002a82:	d004      	beq.n	8002a8e <xTimerCreateStatic+0x22>
 8002a84:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002a88:	4811      	ldr	r0, [pc, #68]	@ (8002ad0 <xTimerCreateStatic+0x64>)
 8002a8a:	f7fd fdcd 	bl	8000628 <assert_failed>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a8e:	693b      	ldr	r3, [r7, #16]
            }
            #endif /* configASSERT_DEFINED */

            /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
            configASSERT( pxTimerBuffer );
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <xTimerCreateStatic+0x34>
 8002a96:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002a9a:	480d      	ldr	r0, [pc, #52]	@ (8002ad0 <xTimerCreateStatic+0x64>)
 8002a9c:	f7fd fdc4 	bl	8000628 <assert_failed>
            pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	617b      	str	r3, [r7, #20]

            if( pxNewTimer != NULL )
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <xTimerCreateStatic+0x5a>
            {
                /* Timers can be created statically or dynamically so note this
                 * timer was created statically in case it is later deleted.  The
                 * auto-reload bit may get set in prvInitialiseNewTimer(). */
                pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f807 	bl	8002ad4 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8002ac6:	697b      	ldr	r3, [r7, #20]
        }
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	0800367c 	.word	0x0800367c

08002ad4 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <prvInitialiseNewTimer+0x1e>
 8002ae8:	f240 116b 	movw	r1, #363	@ 0x16b
 8002aec:	4812      	ldr	r0, [pc, #72]	@ (8002b38 <prvInitialiseNewTimer+0x64>)
 8002aee:	f7fd fd9b 	bl	8000628 <assert_failed>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8002af2:	f000 fa7d 	bl	8002ff0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fa54 	bl	8000fc0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <prvInitialiseNewTimer+0x5c>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	0800367c 	.word	0x0800367c

08002b3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <xTimerGenericCommand+0x22>
 8002b54:	f240 118b 	movw	r1, #395	@ 0x18b
 8002b58:	481b      	ldr	r0, [pc, #108]	@ (8002bc8 <xTimerGenericCommand+0x8c>)
 8002b5a:	f7fd fd65 	bl	8000628 <assert_failed>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <xTimerGenericCommand+0x90>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02a      	beq.n	8002bbc <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	dc18      	bgt.n	8002baa <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b78:	f7ff fe2a 	bl	80027d0 <xTaskGetSchedulerState>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d109      	bne.n	8002b96 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <xTimerGenericCommand+0x90>)
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	f107 0110 	add.w	r1, r7, #16
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b8e:	f7fe fb77 	bl	8001280 <xQueueGenericSend>
 8002b92:	61f8      	str	r0, [r7, #28]
 8002b94:	e012      	b.n	8002bbc <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <xTimerGenericCommand+0x90>)
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	f107 0110 	add.w	r1, r7, #16
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f7fe fb6d 	bl	8001280 <xQueueGenericSend>
 8002ba6:	61f8      	str	r0, [r7, #28]
 8002ba8:	e008      	b.n	8002bbc <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <xTimerGenericCommand+0x90>)
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	f107 0110 	add.w	r1, r7, #16
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	f7fe fc4b 	bl	8001450 <xQueueGenericSendFromISR>
 8002bba:	61f8      	str	r0, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
    }
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800367c 	.word	0x0800367c
 8002bcc:	24001568 	.word	0x24001568

08002bd0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002bdc:	e008      	b.n	8002bf0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4413      	add	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	18d1      	adds	r1, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f8df 	bl	8002dc0 <prvInsertTimerInActiveList>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ea      	bne.n	8002bde <prvReloadTimer+0xe>
        }
    }
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1e:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <prvProcessExpiredTimer+0x5c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fa0d 	bl	800104c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff ffc3 	bl	8002bd0 <prvReloadTimer>
 8002c4a:	e008      	b.n	8002c5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	4798      	blx	r3
    }
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24001560 	.word	0x24001560

08002c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f859 	bl	8002d38 <prvGetNextExpireTime>
 8002c86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f805 	bl	8002c9c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002c92:	f000 f8d7 	bl	8002e44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c96:	bf00      	nop
 8002c98:	e7f0      	b.n	8002c7c <prvTimerTask+0x8>
	...

08002c9c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002ca6:	f7ff f89b 	bl	8001de0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f866 	bl	8002d80 <prvSampleTimeNow>
 8002cb4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d130      	bne.n	8002d1e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <prvProcessTimerOrBlockTask+0x3c>
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d806      	bhi.n	8002cd8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002cca:	f7ff f897 	bl	8001dfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff9f 	bl	8002c14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002cd6:	e024      	b.n	8002d22 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <prvProcessTimerOrBlockTask+0x90>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <prvProcessTimerOrBlockTask+0x50>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <prvProcessTimerOrBlockTask+0x52>
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <prvProcessTimerOrBlockTask+0x94>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fe fe6d 	bl	80019dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002d02:	f7ff f87b 	bl	8001dfc <xTaskResumeAll>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <prvProcessTimerOrBlockTask+0x98>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
    }
 8002d1c:	e001      	b.n	8002d22 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002d1e:	f7ff f86d 	bl	8001dfc <xTaskResumeAll>
    }
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	24001564 	.word	0x24001564
 8002d30:	24001568 	.word	0x24001568
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <prvGetNextExpireTime+0x44>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <prvGetNextExpireTime+0x16>
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	e000      	b.n	8002d50 <prvGetNextExpireTime+0x18>
 8002d4e:	2200      	movs	r2, #0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <prvGetNextExpireTime+0x44>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e001      	b.n	8002d6c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    }
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	24001560 	.word	0x24001560

08002d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002d88:	f7ff f930 	bl	8001fec <xTaskGetTickCount>
 8002d8c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <prvSampleTimeNow+0x3c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d205      	bcs.n	8002da4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002d98:	f000 f904 	bl	8002fa4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e002      	b.n	8002daa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002daa:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <prvSampleTimeNow+0x3c>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002db0:	68fb      	ldr	r3, [r7, #12]
    }
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	24001570 	.word	0x24001570

08002dc0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d812      	bhi.n	8002e0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002df4:	2301      	movs	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e01b      	b.n	8002e32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <prvInsertTimerInActiveList+0x7c>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fe f8e8 	bl	8000fda <vListInsert>
 8002e0a:	e012      	b.n	8002e32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d206      	bcs.n	8002e22 <prvInsertTimerInActiveList+0x62>
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d302      	bcc.n	8002e22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e007      	b.n	8002e32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <prvInsertTimerInActiveList+0x80>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7fe f8d4 	bl	8000fda <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e32:	697b      	ldr	r3, [r7, #20]
    }
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	24001564 	.word	0x24001564
 8002e40:	24001560 	.word	0x24001560

08002e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e4a:	e097      	b.n	8002f7c <prvProcessReceivedCommands+0x138>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f2c0 8094 	blt.w	8002f7c <prvProcessReceivedCommands+0x138>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f8f1 	bl	800104c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff87 	bl	8002d80 <prvSampleTimeNow>
 8002e72:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d87c      	bhi.n	8002f76 <prvProcessReceivedCommands+0x132>
 8002e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <prvProcessReceivedCommands+0x40>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ea9 	.word	0x08002ea9
 8002e8c:	08002f11 	.word	0x08002f11
 8002e90:	08002f25 	.word	0x08002f25
 8002e94:	08002f63 	.word	0x08002f63
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002ea9 	.word	0x08002ea9
 8002ea0:	08002f11 	.word	0x08002f11
 8002ea4:	08002f25 	.word	0x08002f25
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	18d1      	adds	r1, r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff7a 	bl	8002dc0 <prvInsertTimerInActiveList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d053      	beq.n	8002f7a <prvProcessReceivedCommands+0x136>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f7ff fe6f 	bl	8002bd0 <prvReloadTimer>
 8002ef2:	e008      	b.n	8002f06 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002f0e:	e034      	b.n	8002f7a <prvProcessReceivedCommands+0x136>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8002f22:	e02b      	b.n	8002f7c <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <prvProcessReceivedCommands+0x10a>
 8002f44:	f240 315e 	movw	r1, #862	@ 0x35e
 8002f48:	4814      	ldr	r0, [pc, #80]	@ (8002f9c <prvProcessReceivedCommands+0x158>)
 8002f4a:	f7fd fb6d 	bl	8000628 <assert_failed>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	18d1      	adds	r1, r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff30 	bl	8002dc0 <prvInsertTimerInActiveList>
                        break;
 8002f60:	e00c      	b.n	8002f7c <prvProcessReceivedCommands+0x138>
                        {
                            /* If dynamic allocation is not enabled, the memory
                             * could not have been dynamically allocated. So there is
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002f74:	e002      	b.n	8002f7c <prvProcessReceivedCommands+0x138>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <prvProcessReceivedCommands+0x138>
                        break;
 8002f7a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <prvProcessReceivedCommands+0x15c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	1d39      	adds	r1, r7, #4
 8002f82:	2200      	movs	r2, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fb01 	bl	800158c <xQueueReceive>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af5d 	bne.w	8002e4c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	0800367c 	.word	0x0800367c
 8002fa0:	24001568 	.word	0x24001568

08002fa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002faa:	e009      	b.n	8002fc0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fac:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <prvSwitchTimerLists+0x44>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	f7ff fe2a 	bl	8002c14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fc0:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <prvSwitchTimerLists+0x44>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <prvSwitchTimerLists+0x44>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <prvSwitchTimerLists+0x48>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <prvSwitchTimerLists+0x44>)
 8002fd6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <prvSwitchTimerLists+0x48>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
    }
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	24001560 	.word	0x24001560
 8002fec:	24001564 	.word	0x24001564

08002ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ff6:	f000 f92f 	bl	8003258 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <prvCheckForValidListAndQueue+0x60>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d120      	bne.n	8003044 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8003002:	4814      	ldr	r0, [pc, #80]	@ (8003054 <prvCheckForValidListAndQueue+0x64>)
 8003004:	f7fd ffbc 	bl	8000f80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003008:	4813      	ldr	r0, [pc, #76]	@ (8003058 <prvCheckForValidListAndQueue+0x68>)
 800300a:	f7fd ffb9 	bl	8000f80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <prvCheckForValidListAndQueue+0x6c>)
 8003010:	4a10      	ldr	r2, [pc, #64]	@ (8003054 <prvCheckForValidListAndQueue+0x64>)
 8003012:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <prvCheckForValidListAndQueue+0x70>)
 8003016:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <prvCheckForValidListAndQueue+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <prvCheckForValidListAndQueue+0x74>)
 8003020:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <prvCheckForValidListAndQueue+0x78>)
 8003022:	210c      	movs	r1, #12
 8003024:	2014      	movs	r0, #20
 8003026:	f7fe f8c1 	bl	80011ac <xQueueGenericCreateStatic>
 800302a:	4603      	mov	r3, r0
 800302c:	4a08      	ldr	r2, [pc, #32]	@ (8003050 <prvCheckForValidListAndQueue+0x60>)
 800302e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003030:	4b07      	ldr	r3, [pc, #28]	@ (8003050 <prvCheckForValidListAndQueue+0x60>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <prvCheckForValidListAndQueue+0x60>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	490b      	ldr	r1, [pc, #44]	@ (800306c <prvCheckForValidListAndQueue+0x7c>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fc84 	bl	800194c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003044:	f000 f934 	bl	80032b0 <vPortExitCritical>
    }
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	24001568 	.word	0x24001568
 8003054:	24001538 	.word	0x24001538
 8003058:	2400154c 	.word	0x2400154c
 800305c:	24001560 	.word	0x24001560
 8003060:	24001564 	.word	0x24001564
 8003064:	24001664 	.word	0x24001664
 8003068:	24001574 	.word	0x24001574
 800306c:	080036fc 	.word	0x080036fc

08003070 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b04      	subs	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003088:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b04      	subs	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0201 	bic.w	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b04      	subs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030a0:	4a0c      	ldr	r2, [pc, #48]	@ (80030d4 <pxPortInitialiseStack+0x64>)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b14      	subs	r3, #20
 80030aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b04      	subs	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f06f 0202 	mvn.w	r2, #2
 80030be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b20      	subs	r3, #32
 80030c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	080030d9 	.word	0x080030d9

080030d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <prvTaskExitError+0x48>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d003      	beq.n	80030f4 <prvTaskExitError+0x1c>
 80030ec:	21e4      	movs	r1, #228	@ 0xe4
 80030ee:	480d      	ldr	r0, [pc, #52]	@ (8003124 <prvTaskExitError+0x4c>)
 80030f0:	f7fd fa9a 	bl	8000628 <assert_failed>
        __asm volatile
 80030f4:	f04f 03a0 	mov.w	r3, #160	@ 0xa0
 80030f8:	b672      	cpsid	i
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	b662      	cpsie	i
 8003108:	607b      	str	r3, [r7, #4]
    }
 800310a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800310c:	bf00      	nop
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0fc      	beq.n	800310e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	24000010 	.word	0x24000010
 8003124:	08003704 	.word	0x08003704
	...

08003130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <pxCurrentTCBConst2>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6808      	ldr	r0, [r1, #0]
 8003136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313a:	f380 8809 	msr	PSP, r0
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f04f 0000 	mov.w	r0, #0
 8003146:	f380 8811 	msr	BASEPRI, r0
 800314a:	4770      	bx	lr
 800314c:	f3af 8000 	nop.w

08003150 <pxCurrentTCBConst2>:
 8003150:	2400122c 	.word	0x2400122c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003158:	4808      	ldr	r0, [pc, #32]	@ (800317c <prvPortStartFirstTask+0x24>)
 800315a:	6800      	ldr	r0, [r0, #0]
 800315c:	6800      	ldr	r0, [r0, #0]
 800315e:	f380 8808 	msr	MSP, r0
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8814 	msr	CONTROL, r0
 800316a:	b662      	cpsie	i
 800316c:	b661      	cpsie	f
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	df00      	svc	0
 8003178:	bf00      	nop
 800317a:	0000      	.short	0x0000
 800317c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop

08003184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800318a:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <xPortStartScheduler+0xbc>)
 800318c:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	@ 0xff
 800319a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <xPortStartScheduler+0xc0>)
 80031b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031b2:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031b8:	e009      	b.n	80031ce <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80031ba:	4b23      	ldr	r3, [pc, #140]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d0ef      	beq.n	80031ba <xPortStartScheduler+0x36>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	4a19      	ldr	r2, [pc, #100]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031e2:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031e4:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031ec:	4a16      	ldr	r2, [pc, #88]	@ (8003248 <xPortStartScheduler+0xc4>)
 80031ee:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031f8:	4b14      	ldr	r3, [pc, #80]	@ (800324c <xPortStartScheduler+0xc8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a13      	ldr	r2, [pc, #76]	@ (800324c <xPortStartScheduler+0xc8>)
 80031fe:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 8003202:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <xPortStartScheduler+0xc8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a10      	ldr	r2, [pc, #64]	@ (800324c <xPortStartScheduler+0xc8>)
 800320a:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800320e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003210:	f000 f8ce 	bl	80033b0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <xPortStartScheduler+0xcc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800321a:	f000 f8ed 	bl	80033f8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <xPortStartScheduler+0xd0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a0c      	ldr	r2, [pc, #48]	@ (8003254 <xPortStartScheduler+0xd0>)
 8003224:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003228:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800322a:	f7ff ff95 	bl	8003158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800322e:	f7ff f813 	bl	8002258 <vTaskSwitchContext>
    prvTaskExitError();
 8003232:	f7ff ff51 	bl	80030d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	e000e400 	.word	0xe000e400
 8003244:	240016ac 	.word	0x240016ac
 8003248:	240016b0 	.word	0x240016b0
 800324c:	e000ed20 	.word	0xe000ed20
 8003250:	24000010 	.word	0x24000010
 8003254:	e000ef34 	.word	0xe000ef34

08003258 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
        __asm volatile
 800325e:	f04f 03a0 	mov.w	r3, #160	@ 0xa0
 8003262:	b672      	cpsid	i
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	b662      	cpsie	i
 8003272:	607b      	str	r3, [r7, #4]
    }
 8003274:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003276:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <vPortEnterCritical+0x4c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <vPortEnterCritical+0x4c>)
 800327e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003280:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <vPortEnterCritical+0x4c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d109      	bne.n	800329c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <vPortEnterCritical+0x50>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <vPortEnterCritical+0x44>
 8003292:	f240 119d 	movw	r1, #413	@ 0x19d
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <vPortEnterCritical+0x54>)
 8003298:	f7fd f9c6 	bl	8000628 <assert_failed>
    }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	24000010 	.word	0x24000010
 80032a8:	e000ed04 	.word	0xe000ed04
 80032ac:	08003704 	.word	0x08003704

080032b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <vPortExitCritical+0x40>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <vPortExitCritical+0x18>
 80032be:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80032c2:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <vPortExitCritical+0x44>)
 80032c4:	f7fd f9b0 	bl	8000628 <assert_failed>
    uxCriticalNesting--;
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <vPortExitCritical+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <vPortExitCritical+0x40>)
 80032d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032d2:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <vPortExitCritical+0x40>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <vPortExitCritical+0x36>
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]
        __asm volatile
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f383 8811 	msr	BASEPRI, r3
    }
 80032e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	24000010 	.word	0x24000010
 80032f4:	08003704 	.word	0x08003704
	...

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b15      	ldr	r3, [pc, #84]	@ (8003360 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f01e 0f10 	tst.w	lr, #16
 8003310:	bf08      	it	eq
 8003312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003320:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 8003324:	b672      	cpsid	i
 8003326:	f380 8811 	msr	BASEPRI, r0
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	b662      	cpsie	i
 8003334:	f7fe ff90 	bl	8002258 <vTaskSwitchContext>
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f380 8811 	msr	BASEPRI, r0
 8003340:	bc09      	pop	{r0, r3}
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334a:	f01e 0f10 	tst.w	lr, #16
 800334e:	bf08      	it	eq
 8003350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003354:	f380 8809 	msr	PSP, r0
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <pxCurrentTCBConst>:
 8003360:	2400122c 	.word	0x2400122c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
        __asm volatile
 800336e:	f04f 03a0 	mov.w	r3, #160	@ 0xa0
 8003372:	b672      	cpsid	i
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	b662      	cpsie	i
 8003382:	607b      	str	r3, [r7, #4]
    }
 8003384:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003386:	f7fe fe4d 	bl	8002024 <xTaskIncrementTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003390:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <SysTick_Handler+0x44>)
 8003392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f383 8811 	msr	BASEPRI, r3
    }
 80033a2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <vPortSetupTimerInterrupt+0x34>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <vPortSetupTimerInterrupt+0x38>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <vPortSetupTimerInterrupt+0x3c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	@ (80033f0 <vPortSetupTimerInterrupt+0x40>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <vPortSetupTimerInterrupt+0x44>)
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <vPortSetupTimerInterrupt+0x34>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010
 80033e8:	e000e018 	.word	0xe000e018
 80033ec:	24000004 	.word	0x24000004
 80033f0:	10624dd3 	.word	0x10624dd3
 80033f4:	e000e014 	.word	0xe000e014

080033f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003408 <vPortEnableVFP+0x10>
 80033fc:	6801      	ldr	r1, [r0, #0]
 80033fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003402:	6001      	str	r1, [r0, #0]
 8003404:	4770      	bx	lr
 8003406:	0000      	.short	0x0000
 8003408:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop

08003410 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003416:	f3ef 8305 	mrs	r3, IPSR
 800341a:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d90e      	bls.n	8003440 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003422:	4a10      	ldr	r2, [pc, #64]	@ (8003464 <vPortValidateInterruptPriority+0x54>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800342c:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <vPortValidateInterruptPriority+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	429a      	cmp	r2, r3
 8003434:	d204      	bcs.n	8003440 <vPortValidateInterruptPriority+0x30>
 8003436:	f240 312a 	movw	r1, #810	@ 0x32a
 800343a:	480c      	ldr	r0, [pc, #48]	@ (800346c <vPortValidateInterruptPriority+0x5c>)
 800343c:	f7fd f8f4 	bl	8000628 <assert_failed>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <vPortValidateInterruptPriority+0x60>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <vPortValidateInterruptPriority+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d904      	bls.n	800345a <vPortValidateInterruptPriority+0x4a>
 8003450:	f240 313a 	movw	r1, #826	@ 0x33a
 8003454:	4805      	ldr	r0, [pc, #20]	@ (800346c <vPortValidateInterruptPriority+0x5c>)
 8003456:	f7fd f8e7 	bl	8000628 <assert_failed>
    }
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000e3f0 	.word	0xe000e3f0
 8003468:	240016ac 	.word	0x240016ac
 800346c:	08003704 	.word	0x08003704
 8003470:	e000ed0c 	.word	0xe000ed0c
 8003474:	240016b0 	.word	0x240016b0

08003478 <memset>:
 8003478:	4402      	add	r2, r0
 800347a:	4603      	mov	r3, r0
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	f803 1b01 	strb.w	r1, [r3], #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4d0d      	ldr	r5, [pc, #52]	@ (80034c0 <__libc_init_array+0x38>)
 800348c:	4c0d      	ldr	r4, [pc, #52]	@ (80034c4 <__libc_init_array+0x3c>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	2600      	movs	r6, #0
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	4d0b      	ldr	r5, [pc, #44]	@ (80034c8 <__libc_init_array+0x40>)
 800349a:	4c0c      	ldr	r4, [pc, #48]	@ (80034cc <__libc_init_array+0x44>)
 800349c:	f000 f826 	bl	80034ec <_init>
 80034a0:	1b64      	subs	r4, r4, r5
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	2600      	movs	r6, #0
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	080037b8 	.word	0x080037b8
 80034c4:	080037b8 	.word	0x080037b8
 80034c8:	080037b8 	.word	0x080037b8
 80034cc:	080037bc 	.word	0x080037bc

080034d0 <memcpy>:
 80034d0:	440a      	add	r2, r1
 80034d2:	4291      	cmp	r1, r2
 80034d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034d8:	d100      	bne.n	80034dc <memcpy+0xc>
 80034da:	4770      	bx	lr
 80034dc:	b510      	push	{r4, lr}
 80034de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e6:	4291      	cmp	r1, r2
 80034e8:	d1f9      	bne.n	80034de <memcpy+0xe>
 80034ea:	bd10      	pop	{r4, pc}

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
